-- Khai b√°o c·∫•u h√¨nh
getgenv().Config = {
    ["Account Hold Gem"] = "", -- Thay b·∫±ng t√™n t√†i kho·∫£n th·ª±c t·∫ø
    ["Gem"] = "50b",
    ["Time Remove"] = 5, -- ph√∫t
    ["Link Webhook"] = "",
    ["Hop sever"] = 15, -- ph√∫t
}

getgenv().hugemode = {
    ["All Huges Normal"] = { strategy = "+2%", sell = true },
    ["All Huges Golden"] = { strategy = "-2%", sell = true },
    ["All Huges Rainbow"] = { strategy = "+999%", sell = true },
    ["All Huges Shiny"] = { strategy = "-1%", sell = true }
}

getgenv().item = {
    ["Hype Egg 2"] = 95,
}

-- ƒê·ª£i game t·∫£i ho√†n t·∫•t
if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- Khai b√°o d·ªãch v·ª• v√† th∆∞ vi·ªán
local VirtualUser = game:GetService("VirtualUser")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Library = ReplicatedStorage.Library
local Client = Library.Client
local RAPCmds = require(Client.RAPCmds)
local Network = require(Client.Network)
local Savemod = require(Client.Save)
local Functions = require(ReplicatedStorage.Library.Functions)
local Items = require(ReplicatedStorage.Library.Items.Types)

-- Ch·ªëng idle
for _, v in pairs(getconnections(LocalPlayer.Idled)) do v:Disable() end
LocalPlayer.Idled:Connect(function()
    VirtualUser:ClickButton2(Vector2.new(math.random(0, 1000), math.random(0, 1000)))
end)

-- Hook ƒë·ªÉ ch·ªëng server closing ho·∫∑c idle tracking
local old
old = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    if not checkcaller() then
        local Name = tostring(self)
        if table.find({"Server Closing", "Idle Tracking: Update Timer", "Move Server"}, Name) then
            return nil
        end
    end
    return old(self, ...)
end)
Network.Fire("Idle Tracking: Stop Timer")

-- ƒê·ª£i giao di·ªán v√† leaderstats s·∫µn s√†ng
local function waitForGameReady()
    local success, result = pcall(function()
        -- ƒê·ª£i UI v√† leaderstats
        while not (game:IsLoaded() and
               LocalPlayer:FindFirstChild("PlayerGui") and
               not LocalPlayer.PlayerGui:FindFirstChild("__INTRO") and
               LocalPlayer.PlayerGui:FindFirstChild("MainLeft") and
               LocalPlayer.PlayerGui.MainLeft.Left.Currency.Diamonds.Diamonds.Visible == true and
               not LocalPlayer:FindFirstChild("GUIFX Holder")) do
            task.wait(0.5)
        end
        
        -- ƒê·ª£i leaderstats
        local timeout = 30 -- gi√¢y
        local startTime = tick()
        while not (LocalPlayer:FindFirstChild("leaderstats") and LocalPlayer.leaderstats:FindFirstChild("üíé Diamonds")) do
            if tick() - startTime > timeout then
                warn("Timeout ch·ªù leaderstats['üíé Diamonds']")
                return false
            end
            task.wait(0.5)
        end
        
        return true
    end)
    
    if not success or not result then
        warn("L·ªói khi ƒë·ª£i game s·∫µn s√†ng: " .. tostring(result))
        return false
    end
    
    return true
end

-- ƒê·ª£i game s·∫µn s√†ng
if not waitForGameReady() then
    warn("Game kh√¥ng s·∫µn s√†ng, k·∫øt th√∫c script")
    return
end

print("Game ƒë√£ s·∫µn s√†ng, b·∫Øt ƒë·∫ßu ch·∫°y script")

-- Bi·∫øn global ƒë·ªÉ theo d√µi
local totalhuge = 0
local listedItems = {}
local currentBooth = nil
local usedSlots = 0
local MAX_BOOTH_SLOTS = 25

-- ƒê·∫øm s·ªë pet "Huge"
local function countHugePets()
    local count = 0
    for _, v in pairs(Savemod.Get().Inventory.Pet) do
        if string.find(v.id, "Huge") then
            count = count + 1
        end
    end
    return count
end

-- C·∫≠p nh·∫≠t ƒë·∫øm Huge ƒë·ªãnh k·ª≥
spawn(function()
    while task.wait(10) do
        totalhuge = countHugePets()
    end
end)

-- H√†m t√≠nh RAP
local function GetRap(Class, ItemTable)
    local success, result = pcall(function()
        local Item = require(Library.Items[Class .. "Item"])(ItemTable.id)
        if ItemTable.sh then Item:SetShiny(true) end
        if ItemTable.pt == 1 then Item:SetGolden() end
        if ItemTable.pt == 2 then Item:SetRainbow() end
        if ItemTable.tn then Item:SetTier(ItemTable.tn) end
        return RAPCmds.Get(Item) or 0
    end)
    
    if not success then
        warn("L·ªói khi t√≠nh RAP: " .. tostring(result))
        return 0
    end
    
    return result
end

-- H√†m chuy·ªÉn ƒë·ªïi gi√°
local function ConvertPrice(Price, Rap)
    if type(Price) == "string" then
        local Percentage = tonumber(Price:match("^([%+%-]?%d+)%%"))
        if Percentage then
            if Price:sub(1, 1) == "+" then
                return (1 + (Percentage / 100)) * Rap
            elseif Price:sub(1, 1) == "-" then
                return (1 - (Percentage / 100)) * Rap
            else
                return (Percentage / 100) * Rap
            end
        end
    end
    return Price
end

-- H√†m chi·∫øm gian h√†ng
local function occupyBooth()
    local success, result = pcall(function()
        -- Ki·ªÉm tra xem ƒë√£ c√≥ gian h√†ng ch∆∞a
        local HaveBooth = false
        for _, Booth in ipairs(workspace.__THINGS.Booths:GetChildren()) do
            if Booth:IsA("Model") and Booth:GetAttribute("Owner") == LocalPlayer.UserId then
                HaveBooth = true
                currentBooth = Booth
                LocalPlayer.Character.HumanoidRootPart.CFrame = Booth.Table.CFrame * CFrame.new(5, 0, 0)
                print("ƒê√£ t√¨m th·∫•y gian h√†ng c·ªßa b·∫°n!")
                return true
            end
        end

        if not HaveBooth then
            -- T√¨m gian h√†ng g·∫ßn nh·∫•t ƒë·ªÉ chi·∫øm
            local pos, id
            local distance = math.huge
            local playerPos = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Position
            if not playerPos then return false end

            for _, v in pairs(workspace.TradingPlaza.BoothSpawns:GetChildren()) do
                if v and v.WorldPivot then
                    local boothPosition = v.WorldPivot.Position
                    local currentDistance = (boothPosition - playerPos).Magnitude
                    local boothId = v:GetAttribute("ID")
                    if boothId and currentDistance < distance then
                        distance = currentDistance
                        pos = boothPosition
                        id = boothId
                    end
                end
            end

            if pos and id then
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(pos + Vector3.new(-5, 5, 0))
                task.wait(0.5)
                local claimSuccess = pcall(function()
                    Network.Invoke("Booths_ClaimBooth", tostring(id))
                end)
                if claimSuccess then
                    print("ƒê√£ chi·∫øm gian h√†ng ID: " .. id)
                    return true
                else
                    warn("Kh√¥ng th·ªÉ chi·∫øm gian h√†ng")
                    return false
                end
            else
                warn("Kh√¥ng t√¨m th·∫•y gian h√†ng g·∫ßn!")
                return false
            end
        end
    end)
    
    if not success then
        warn("L·ªói khi chi·∫øm gian h√†ng: " .. tostring(result))
        return false
    end
    
    return result
end

-- H√†m g·ª≠i kim c∆∞∆°ng
local function sendGems()
    local success, result = pcall(function()
        local targetUser = getgenv().Config["Account Hold Gem"]
        if targetUser == "" then
            warn("Ch∆∞a c·∫•u h√¨nh t√†i kho·∫£n nh·∫≠n kim c∆∞∆°ng")
            return false
        end
        
        local diamondThreshold = Functions.ParseNumberSmart(getgenv().Config["Gem"])
        local currentDiamonds = LocalPlayer.leaderstats["üíé Diamonds"].Value
        
        if currentDiamonds >= diamondThreshold then
            -- T√¨m ID c·ªßa kim c∆∞∆°ng
            for i, v in pairs(Savemod.Get().Inventory.Currency) do
                if v.id == "Diamonds" then
                    -- Gi·ªØ l·∫°i 1 t·ª∑ kim c∆∞∆°ng
                    local amountToSend = currentDiamonds - Functions.ParseNumberSmart("1b")
                    
                    -- G·ª≠i kim c∆∞∆°ng
                    local args = {
                        [1] = targetUser,
                        [2] = "T·ª± ƒë·ªông g·ª≠i t·ª´ script",
                        [3] = "Currency",
                        [4] = tostring(i),
                        [5] = amountToSend
                    }
                    
                    ReplicatedStorage.Network["Mailbox: Send"]:InvokeServer(unpack(args))
                    print("ƒê√£ g·ª≠i " .. tostring(amountToSend) .. " kim c∆∞∆°ng ƒë·∫øn " .. targetUser)
                    return true
                end
            end
            warn("Kh√¥ng t√¨m th·∫•y ID kim c∆∞∆°ng")
        end
        
        return false
    end)
    
    if not success then
        warn("L·ªói khi g·ª≠i kim c∆∞∆°ng: " .. tostring(result))
        return false
    end
    
    return result
end

-- H√†m ƒë·∫øm s·ªë slot ƒë√£ s·ª≠ d·ª•ng trong gian h√†ng
local function countUsedBoothSlots()
    local count = 0
    local success, result = pcall(function()
        if not currentBooth then return 0 end
        
        for _, child in pairs(currentBooth.Pets.BoothTop.PetScroll:GetChildren()) do
            if child:IsA("Frame") then
                count = count + 1
            end
        end
        
        return count
    end)
    
    if not success then
        warn("L·ªói khi ƒë·∫øm slot gian h√†ng: " .. tostring(result))
        return 0
    end
    
    return count
end

-- H√†m x√≥a t·∫•t c·∫£ listing
local function removeAllListings()
    local success, result = pcall(function()
        if not currentBooth then return false end
        
        for _, v1 in pairs(currentBooth.Pets.BoothTop.PetScroll:GetChildren()) do
            if v1:IsA("Frame") then
                ReplicatedStorage.Network["Booths_RemoveListing"]:InvokeServer(v1.Name)
                task.wait(0.2) -- Tr√°nh ratelimit
            end
        end
        
        -- Reset danh s√°ch ƒë√£ list v√† s·ªë slot ƒë√£ s·ª≠ d·ª•ng
        listedItems = {}
        usedSlots = 0
        print("ƒê√£ x√≥a t·∫•t c·∫£ listing")
        return true
    end)
    
    if not success then
        warn("L·ªói khi x√≥a listing: " .. tostring(result))
        return false
    end
    
    return result
end

-- H√†m x√°c ƒë·ªãnh lo·∫°i pet Huge
local function getHugeType(petId, petData)
    if petData.pt == 1 or string.find(petId, "Golden") then
        return "All Huges Golden"
    elseif petData.pt == 2 or string.find(petId, "Rainbow") then
        return "All Huges Rainbow"
    elseif petData.sh or string.find(petId, "Shiny") then
        return "All Huges Shiny"
    else
        return "All Huges Normal"
    end
end

-- H√†m t·∫°o listing cho v·∫≠t ph·∫©m
local function createItemListing(uuid, itemId, itemClass, amount, rap)
    -- Ki·ªÉm tra xem ƒë√£ list item n√†y ch∆∞a
    if listedItems[uuid] then return false end
    
    -- Ki·ªÉm tra xem c√≤n slot tr·ªëng kh√¥ng
    if usedSlots >= MAX_BOOTH_SLOTS then
        print("ƒê√£ ƒë·∫°t gi·ªõi h·∫°n " .. MAX_BOOTH_SLOTS .. " slot gian h√†ng")
        return false
    end
    
    local price = 0
    -- Ki·ªÉm tra xem c√≥ c·∫•u h√¨nh cho item n√†y kh√¥ng
    if getgenv().item[itemId] then
        price = math.floor(rap * (getgenv().item[itemId] / 100))
    else
        return false
    end
    
    if price <= 0 then
        warn("Gi√° kh√¥ng h·ª£p l·ªá cho " .. itemId)
        return false
    end
    
    local listingAmount = math.min(amount, 15000, math.floor(25e9 / price))
    if listingAmount <= 0 then
        warn("S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá cho " .. itemId)
        return false
    end
    
    local args = {
        [1] = tostring(uuid),
        [2] = price,
        [3] = listingAmount
    }
    
    local success, err = pcall(function()
        return Network.Invoke("Booths_CreateListing", unpack(args))
    end)
    
    if success then
        listedItems[uuid] = true
        usedSlots = usedSlots + 1
        print("ƒê√£ t·∫°o listing cho v·∫≠t ph·∫©m: " .. itemId .. " v·ªõi gi√° " .. price .. " (Slot " .. usedSlots .. "/" .. MAX_BOOTH_SLOTS .. ")")
        return true
    else
        warn("L·ªói khi t·∫°o listing cho v·∫≠t ph·∫©m: " .. tostring(err))
        return false
    end
end

-- H√†m t·∫°o listing cho pet Huge
local function createHugeListing(uuid, petData, rap)
    -- Ki·ªÉm tra xem ƒë√£ list pet n√†y ch∆∞a
    if listedItems[uuid] then return false end
    
    -- Ki·ªÉm tra xem c√≤n slot tr·ªëng kh√¥ng
    if usedSlots >= MAX_BOOTH_SLOTS then
        print("ƒê√£ ƒë·∫°t gi·ªõi h·∫°n " .. MAX_BOOTH_SLOTS .. " slot gian h√†ng")
        return false
    end
    
    local typeString = getHugeType(petData.id, petData)
    local hugeConfig = getgenv().hugemode[typeString]
    
    -- Ki·ªÉm tra xem c√≥ c·∫ßn b√°n kh√¥ng
    if hugeConfig.sell == false then
        return false
    end
    
    -- T√≠nh gi√° d·ª±a tr√™n chi·∫øn l∆∞·ª£c
    local adjustment = hugeConfig.strategy or ""
    local multiplier = 1
    
    if adjustment ~= "" then
        local sign = adjustment:sub(1, 1)
        local percentStr = adjustment:sub(2, -2)
        local percent = tonumber(percentStr)
        
        if sign == "+" then
            multiplier = 1 + percent / 100
        elseif sign == "-" then
            multiplier = 1 - percent / 100
        end
    end
    
    local price = math.floor(rap * multiplier)
    if price <= 0 then
        warn("Gi√° kh√¥ng h·ª£p l·ªá cho " .. petData.id)
        return false
    end
    
    local maxAmount = math.min(petData._am or 1, 15000, math.floor(25e9 / price))
    if maxAmount <= 0 then
        warn("S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá cho " .. petData.id)
        return false
    end
    
    local success, err = pcall(function()
        return Network.Invoke("Booths_CreateListing", uuid, math.ceil(price), maxAmount)
    end)
    
    if success then
        listedItems[uuid] = true
        usedSlots = usedSlots + 1
        print("ƒê√£ t·∫°o listing cho pet Huge: " .. petData.id .. " v·ªõi gi√° " .. price .. " (Slot " .. usedSlots .. "/" .. MAX_BOOTH_SLOTS .. ")")
        return true
    else
        warn("L·ªói khi t·∫°o listing cho pet Huge: " .. tostring(err))
        return false
    end
end

-- Logic teleport v√† chi·∫øm gian h√†ng
spawn(function()
    while task.wait(5) do
        -- Ki·ªÉm tra xem ƒëang ·ªü Plaza hay Trading Plaza ch∆∞a
        if game.PlaceId == 8737899170 or game.PlaceId == 16498369169 then
            -- Ki·ªÉm tra s·ªë l∆∞·ª£ng pet Huge
            if totalhuge >= 5 then
                print("C√≥ " .. totalhuge .. " pet Huge, teleport ƒë·∫øn Trading Plaza")
                TeleportService:Teleport(15588442388)
            else
                print("Ch·ªâ c√≥ " .. totalhuge .. " pet Huge, teleport ƒë·∫øn Trading Plaza")
                Network.Invoke("Travel to Trading Plaza")
                TeleportService:Teleport(15502339080)
            end
        elseif game.PlaceId == 15588442388 or game.PlaceId == 15502339080 then
            -- ƒê·ª£i nh√¢n v·∫≠t load
            if not (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")) then
                task.wait(1)
                continue
            end
            
            -- Chi·∫øm gian h√†ng
            if not occupyBooth() then
                print("ƒêang th·ª≠ chi·∫øm gian h√†ng l·∫°i...")
                task.wait(5)
            end
        end
    end
end)

-- G·ª≠i kim c∆∞∆°ng
spawn(function()
    while task.wait(30) do
        sendGems()
    end
end)

-- X√≥a listing ƒë·ªãnh k·ª≥
spawn(function()
    while true do
        task.wait(getgenv().Config["Time Remove"] * 60)
        if game.PlaceId == 15588442388 or game.PlaceId == 15502339080 then
            removeAllListings()
        end
    end
end)

-- Server hopping
spawn(function()
    while true do
        task.wait(getgenv().Config["Hop sever"] * 60)
        
        -- Ki·ªÉm tra xem c√≥ ƒë·ªß th·ªùi gian ƒë·ªÉ hop server kh√¥ng
        print("Hopping server...")
        if game.PlaceId == 15588442388 or game.PlaceId == 15502339080 then
            local servers = {}
            local cursor = ""
            local req = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100" .. cursor))
            
            for _, server in ipairs(req.data) do
                if server.playing < server.maxPlayers and server.id ~= game.JobId then
                    table.insert(servers, server.id)
                end
            end
            
            if #servers > 0 then
                local randomServer = servers[math.random(1, #servers)]
                TeleportService:TeleportToPlaceInstance(game.PlaceId, randomServer)
            else
                print("Kh√¥ng t√¨m th·∫•y server ƒë·ªÉ hop")
            end
        end
    end
end)

-- Main loop - T·∫°o listings
spawn(function()
    while true do
        task.wait(10)
        
        if game.PlaceId ~= 15588442388 and game.PlaceId ~= 15502339080 then
            continue
        end
        
        -- Ki·ªÉm tra xem c√≥ gian h√†ng kh√¥ng
        if not currentBooth then
            occupyBooth()
            if not currentBooth then
                print("Kh√¥ng t√¨m th·∫•y gian h√†ng, ƒëang th·ª≠ l·∫°i...")
                continue
            end
        end
        
        -- C·∫≠p nh·∫≠t s·ªë slot ƒë√£ s·ª≠ d·ª•ng
        usedSlots = countUsedBoothSlots()
        print("Hi·ªán t·∫°i ƒëang s·ª≠ d·ª•ng: " .. usedSlots .. "/" .. MAX_BOOTH_SLOTS .. " slot gian h√†ng")
        
        -- Ki·ªÉm tra xem ƒë√£ ƒë·∫ßy slot ch∆∞a
        if usedSlots >= MAX_BOOTH_SLOTS then
            print("ƒê√£ s·ª≠ d·ª•ng ƒë·ªß " .. MAX_BOOTH_SLOTS .. " slot gian h√†ng, ch·ªù ƒë·∫øn l·∫ßn reset")
            task.wait(60) -- ƒê·ª£i 1 ph√∫t tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
            continue
        end
        
        -- T·∫°o danh s√°ch v·∫≠t ph·∫©m ƒë·ªÉ list
        local BoothQueue = {}
        
        -- Th√™m v·∫≠t ph·∫©m th∆∞·ªùng v√†o h√†ng ƒë·ª£i
        for Class, Items in pairs(Savemod.Get().Inventory) do
            if Class == "Pet" then continue end -- X·ª≠ l√Ω pet ri√™ng
            
            for ItemId, ItemData in pairs(Items) do
                local amount = ItemData._am or 1
                if getgenv().item[ItemData.id] and not listedItems[ItemId] and amount > 0 then
                    local rap = 0
                    pcall(function()
                        local itemObject = require(Library.Items[Class .. "Item"])(ItemData.id)
                        rap = itemObject:GetRAP() or 0
                    end)
                    
                    if rap > 0 then
                        table.insert(BoothQueue, {
                            UUID = ItemId,
                            Item = ItemData,
                            Class = Class,
                            Rap = rap,
                            Type = "Normal"
                        })
                    end
                end
            end
        end
        
        -- Th√™m pet "Huge" v√†o h√†ng ƒë·ª£i
        for PetId, PetData in pairs(Savemod.Get().Inventory.Pet) do
            if string.find(PetData.id, "Huge") and not listedItems[PetId] then
                local rap = 0
                pcall(function()
                    local petItem = require(Library.Items.PetItem)(PetData.id)
                    if PetData.sh then petItem:SetShiny(true) end
                    if PetData.pt == 1 then petItem:SetGolden() end
                    if PetData.pt == 2 then petItem:SetRainbow() end
                    rap = petItem:GetRAP() or 0
                end)
                
                if rap > 0 then
                    local typeString = getHugeType(PetData.id, PetData)
                    table.insert(BoothQueue, {
                        UUID = PetId,
                        Item = PetData,
                        Class = "Pet",
                        Rap = rap,
                        Type = "Huge",
                        HugeType = typeString
                    })
                end
            end
        end
        
        -- S·∫Øp x·∫øp theo RAP gi·∫£m d·∫ßn
        table.sort(BoothQueue, function(a, b) return a.Rap > b.Rap end)
        
        -- T√≠nh to√°n s·ªë l∆∞·ª£ng slot c√≤n tr·ªëng
        local remainingSlots = MAX_BOOTH_SLOTS - usedSlots
        print("C√≥ th·ªÉ th√™m t·ªëi ƒëa " .. remainingSlots .. " v·∫≠t ph·∫©m v√†o gian h√†ng")
        
        -- Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng v·∫≠t ph·∫©m s·∫Ω ƒë∆∞·ª£c th√™m v√†o
        local itemsToAdd = math.min(remainingSlots, #BoothQueue)
        if itemsToAdd == 0 then
            print("Kh√¥ng c√≥ v·∫≠t ph·∫©m m·ªõi ƒë·ªÉ th√™m v√†o gian h√†ng")
            task.wait(60) -- ƒê·ª£i 1 ph√∫t tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
            continue
        end
        
        print("ƒêang th√™m " .. itemsToAdd .. " v·∫≠t ph·∫©m v√†o gian h√†ng...")
        
        -- T·∫°o listing theo th·ª© t·ª± ∆∞u ti√™n, ch·ªâ cho ƒë·∫øn khi ƒë·∫ßy slot
        for i = 1, itemsToAdd do
            local ItemInfo = BoothQueue[i]
            
            -- D·ª´ng n·∫øu ƒë√£ ƒë·∫ßy slot
            if usedSlots >= MAX_BOOTH_SLOTS then
                print("ƒê√£ s·ª≠ d·ª•ng ƒë·ªß " .. MAX_BOOTH_SLOTS .. " slot gian h√†ng")
                break
            end
            
            if ItemInfo.Type == "Huge" then
                createHugeListing(ItemInfo.UUID, ItemInfo.Item, ItemInfo.Rap)
            else
                createItemListing(ItemInfo.UUID, ItemInfo.Item.id, ItemInfo.Class, ItemInfo.Item._am or 1, ItemInfo.Rap)
            end
            task.wait(1) -- ƒê·ª£i gi·ªØa c√°c listing ƒë·ªÉ tr√°nh rate limit
        end
    end
end)

print("Script ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng")
