-- Configuration
getgenv().Config = {
    ["Link Webhook"] = "https://discord.com/api/webhooks/1321351496754925689/Yg48GjwP2EIL99m5THiG5Hpm3by3wVDPpzbQ0zLOw3cpTZoUJiMEBzesN-YpCI-dq4z0", -- Discord webhook link
    ["Webhook ID"] = "", -- Discord user ID to ping
    ["Hop sever"] = 60, -- minutes
    ["Prioritize Low RAP"] = true,
    ["Debug Mode"] = false, -- Reduced debug output
    ["Randomize Price"] = true,
    ["Random Range"] = 0.5,
    ["Enable Webhook Notifications"] = true
}

-- Selling strategies
getgenv().hugemode = {
    ["All Huges Normal"] = { strategy = "-6%", sell = true },
    ["All Huges Golden"] = { strategy = "-6%", sell = true },
    ["All Huges Rainbow"] = { strategy = "-5%", sell = true },
    ["All Huges Shiny"] = { strategy = "-7%", sell = true }
}

-- Item configurations
getgenv().item = { ["Hype Egg 2"] = 95 }

-- Basic setup
if not game:IsLoaded() then game.Loaded:Wait() end
local VirtualUser = game:GetService("VirtualUser")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Library = ReplicatedStorage.Library
local Client = Library.Client
local RAPCmds = require(Client.RAPCmds)
local Network = require(Client.Network)
local Savemod = require(Client.Save)
local Functions = require(ReplicatedStorage.Library.Functions)

-- Place IDs
local PLACE_IDS = {
    MAIN_WORLD = 8737899170,
    TRADING_PLAZA_1 = 15588442388,
    TRADING_PLAZA_2 = 15502339080
}

-- Constants
local MAX_BOOTH_SLOTS = 25
local DEFAULT_RAP_HUGE = 10000000
local DEFAULT_RAP_NORMAL = 100000
local HOP_SERVER_TIME = 60 * 60 -- 60 minutes
local ANTI_AFK_INTERVAL = 60

-- Global variables
local totalhuge = 0
local listedItems = {}
local currentBooth = nil
local usedSlots = 0
local listingStartTime = os.time()
local hugesSold = 0
local normalItemsSold = 0
local lastHopTime = os.time()
local lastBoothItems = {}
local lastCheckTime = os.time()
local stuckAt20SlotsTime = 0
local rapCache = {}

-- Anti-AFK (simplified)
for _, v in pairs(getconnections(LocalPlayer.Idled)) do v:Disable() end
spawn(function()
    while true do
        task.wait(ANTI_AFK_INTERVAL)
        pcall(function() VirtualUser:ClickButton2(Vector2.new(500, 500)) end)
    end
end)

-- Create GUI
local function createCounterGUI()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "HugeCounterGUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    local mainFrame = Instance.new("Frame")
    mainFrame.Size = UDim2.new(0, 200, 0, 60)
    mainFrame.Position = UDim2.new(0, 20, 0, 20)
    mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    mainFrame.BackgroundTransparency = 0.2
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = mainFrame
    
    local hugeLabel = Instance.new("TextLabel")
    hugeLabel.Size = UDim2.new(1, -20, 0, 25)
    hugeLabel.Position = UDim2.new(0, 10, 0, 5)
    hugeLabel.BackgroundTransparency = 1
    hugeLabel.Font = Enum.Font.GothamBold
    hugeLabel.TextSize = 16
    hugeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    hugeLabel.Text = "Huge: 0"
    hugeLabel.TextXAlignment = Enum.TextXAlignment.Left
    hugeLabel.Parent = mainFrame
    
    local gemsLabel = Instance.new("TextLabel")
    gemsLabel.Size = UDim2.new(1, -20, 0, 25)
    gemsLabel.Position = UDim2.new(0, 10, 0, 30)
    gemsLabel.BackgroundTransparency = 1
    gemsLabel.Font = Enum.Font.GothamBold
    gemsLabel.TextSize = 16
    gemsLabel.TextColor3 = Color3.fromRGB(85, 255, 255)
    gemsLabel.Text = "Gems: 0"
    gemsLabel.TextXAlignment = Enum.TextXAlignment.Left
    gemsLabel.Parent = mainFrame
    
    return hugeLabel, gemsLabel
end

-- Create GUI and get references
local hugeLabel, gemsLabel = createCounterGUI()

-- Format numbers function
local function Formatint(int)
    if type(int) ~= "number" then return "0" end
    if int < 1000 then return tostring(int) end
    local suffixes = {"", "K", "M", "B", "T", "Qd", "Qn"}
    local i = math.floor(math.log(int, 1000))
    if i+1 > #suffixes then i = #suffixes-1 end
    return string.format("%.1f%s", int / 1000^i, suffixes[i+1])
end

-- Format number with simplified suffixes
local function formatNumber(num)
    if num >= 1e12 then return string.format("%.1fT", num/1e12)
    elseif num >= 1e9 then return string.format("%.1fB", num/1e9)
    elseif num >= 1e6 then return string.format("%.1fM", num/1e6)
    elseif num >= 1e3 then return string.format("%.1fK", num/1e3)
    else return tostring(num) end
end

-- Get asset function for webhook images
local function GetAsset(Id, pt)
    local Asset = require(Library.Directory.Pets)[Id]
    return string.gsub(Asset and (pt == 1 and Asset.goldenThumbnail or Asset.thumbnail) or "14976456685", "rbxassetid://", "")
end

-- Get stats function for RAP and exist counts
local function GetStats(Cmds, Class, ItemTable)
    return Cmds.Get({
        Class = { Name = Class },
        IsA = function(InputClass) return InputClass == Class end,
        GetId = function() return ItemTable.id end,
        StackKey = function()
            return HttpService:JSONEncode({id = ItemTable.id, sh = ItemTable.sh, pt = ItemTable.pt, tn = ItemTable.tn})
        end
    }) or nil
end

-- Webhook function (optimized)
local function SendWebhookSold(itemId, itemClass, price, itemData, isHuge)
    if not getgenv().Config["Enable Webhook Notifications"] or getgenv().Config["Link Webhook"] == "" then return end
    
    task.spawn(function()
        local success, result = pcall(function()
            local pt = itemData.pt or 0
            local sh = itemData.sh or false
            
            -- Get Huge pets count
            local hugesRemaining = 0
            pcall(function()
                for _, pet in pairs(Savemod.Get().Inventory.Pet) do
                    if string.find(tostring(pet.id), "Huge") then hugesRemaining = hugesRemaining + 1 end
                end
            end)
            
            -- Get current gems
            local currentGems = 0
            pcall(function()
                if game.Players.LocalPlayer:FindFirstChild("leaderstats") then
                    local diamonds = game.Players.LocalPlayer.leaderstats:FindFirstChild("üíé Diamonds")
                    if diamonds then currentGems = diamonds.Value end
                end
            end)
            
            -- Get image
            local Img = "https://biggamesapi.io/image/14976456685"
            if itemClass == "Pet" then
                Img = string.format("https://biggamesapi.io/image/%s", GetAsset(itemId, pt))
            else
                pcall(function()
                    local thumbnail = require(Library.Directory.Items)[itemId] and require(Library.Directory.Items)[itemId].thumbnail
                    if thumbnail then Img = string.gsub(thumbnail, "rbxassetid://", "https://biggamesapi.io/image/") end
                end)
            end
            
            -- Format version text
            local Version = ""
            if itemClass == "Pet" then
                Version = pt == 1 and "Golden " or pt == 2 and "Rainbow " or ""
            end
            
            -- Item type and title
            local ItemType = isHuge and "üî¥ HUGE PET" or "üîµ ITEM"
            local Title = string.format("||%s|| Successfully sold %s%s%s for %s gems", 
                game.Players.LocalPlayer.Name, 
                Version, 
                sh and "Shiny " or "", 
                itemId, 
                Formatint(price))

            -- Get RAP and Exist
            local Exist, Rap
            pcall(function()
                local ExistCmds = require(Client.ExistCountCmds)
                Exist = GetStats(ExistCmds, itemClass, { id = itemId, pt = pt, sh = sh, tn = nil })
                Rap = GetStats(RAPCmds, itemClass, { id = itemId, pt = pt, sh = sh, tn = nil })
            end)

            -- Create webhook body
            local Body = HttpService:JSONEncode({
                content = getgenv().Config["Webhook ID"] ~= "" and string.format("<@%s>", getgenv().Config["Webhook ID"]) or "",
                embeds = {
                    {
                        title = Title,
                        description = ItemType,
                        color = isHuge and 16711680 or 255,
                        timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ"),
                        thumbnail = { url = Img },
                        fields = {
                            { 
                                name = "üí∞ Sale Information",
                                value = string.format("üè∑Ô∏è **Type**: `%s`\nüíé **Price**: `%s gems`\nüí† **RAP**: `%s`\nüí´ **Exist**: `%s`", 
                                    itemClass,
                                    Formatint(price), 
                                    Formatint(Rap or 0), 
                                    Formatint(Exist or 0))
                            },
                            {
                                name = "üìä Account Information",
                                value = string.format("üêæ **Huge Pets Remaining**: `%s`\nüí∞ **Current Gems**: `%s`", 
                                    hugesRemaining, 
                                    Formatint(currentGems))
                            }
                        },
                        footer = { text = "Auto Seller | " .. os.date("%d/%m/%Y %H:%M:%S") }
                    }
                }
            })
            
            -- Send webhook
            request({
                Url = getgenv().Config["Link Webhook"],
                Method = "POST",
                Headers = { ["Content-Type"] = "application/json" },
                Body = Body
            })
        end)
        
        if not success then
            warn("‚ùå Webhook error: " .. tostring(result))
        end
    end)
end

-- Count Huge Pets (simplified)
local function countHugePets()
    local count = 0
    pcall(function()
        for _, pet in pairs(Savemod.Get().Inventory.Pet) do
            if typeof(pet) == "table" and pet.id and string.find(tostring(pet.id), "Huge") then
                count = count + 1
            end
        end
    end)
    return count
end

-- Count booth slots (simplified)
local function countUsedBoothSlots()
    if not currentBooth then return 0 end
    local count = 0
    pcall(function()
        for _, child in pairs(currentBooth.Pets.BoothTop.PetScroll:GetChildren()) do
            if child:IsA("Frame") and child.Name ~= "Template" and child.Visible then
                count = count + 1
            end
        end
    end)
    if count > MAX_BOOTH_SLOTS then count = MAX_BOOTH_SLOTS end
    return count
end

-- Reset booth tracking
local function resetBoothItemTracking()
    usedSlots = 0
    listedItems = {}
    task.wait(1)
    usedSlots = countUsedBoothSlots()
    return usedSlots
end

-- Fast booth filler for 20-slot issue
local function fastFillBooth()
    if usedSlots >= MAX_BOOTH_SLOTS or not currentBooth then return false end
    
    local addCount = 0
    for PetId, PetData in pairs(Savemod.Get().Inventory.Pet) do
        if usedSlots >= MAX_BOOTH_SLOTS then break end
        if not listedItems[PetId] then
            local price = 1000000 -- Default price
            
            -- Determine if Huge pet
            local isHuge = string.find(PetData.id, "Huge") and true or false
            local rap = 0
            
            if isHuge then
                rap = DEFAULT_RAP_HUGE
                local typeStr = "All Huges Normal"
                if PetData.pt == 1 then typeStr = "All Huges Golden"
                elseif PetData.pt == 2 then typeStr = "All Huges Rainbow"
                elseif PetData.sh then typeStr = "All Huges Shiny" end
                
                local strategy = getgenv().hugemode[typeStr] and getgenv().hugemode[typeStr].strategy or "-3%"
                local multiplier = 0.97 -- Default 3% discount
                
                if type(strategy) == "string" then
                    local sign, pct = strategy:match("^([%+%-])([%d%.]+)%%$")
                    pct = tonumber(pct)
                    if sign and pct then
                        multiplier = sign == "+" and (1 + pct/100) or (1 - pct/100)
                    end
                end
                
                price = math.floor(rap * multiplier)
            else
                price = 100000 -- Default for normal pets
            end
            
            -- Create listing with minimal checks
            pcall(function()
                local success = Network.Invoke("Booths_CreateListing", PetId, price, 1)
                if success then
                    listedItems[PetId] = {
                        isHuge = isHuge,
                        id = PetData.id,
                        class = "Pet",
                        price = price,
                        data = PetData,
                        time = os.time()
                    }
                    usedSlots = usedSlots + 1
                    addCount = addCount + 1
                end
            end)
            
            task.wait(0.1) -- Minimal wait between listings
        end
        
        -- Only add a few items at a time to avoid flooding
        if addCount >= 3 then break end
    end
    
    return addCount > 0
end

-- Update counters thread
spawn(function()
    while task.wait(2) do
        local hugeCount = countHugePets()
        hugeLabel.Text = "Huge: " .. formatNumber(hugeCount)
        totalhuge = hugeCount
        
        local gemCount = 0
        pcall(function()
            if game.Players.LocalPlayer:FindFirstChild("leaderstats") then
                local diamonds = game.Players.LocalPlayer.leaderstats:FindFirstChild("üíé Diamonds")
                if diamonds then gemCount = diamonds.Value end
            end
        end)
        gemsLabel.Text = "Gems: " .. formatNumber(gemCount)
    end
end)

-- Get current location
local function getCurrentLocation()
    local currentPlaceId = game.PlaceId
    if currentPlaceId == PLACE_IDS.TRADING_PLAZA_1 or currentPlaceId == PLACE_IDS.TRADING_PLAZA_2 then
        return "TRADING_PLAZA"
    else
        return "OTHER"
    end
end

-- Teleport to trading plaza
local function teleportToTradingPlaza()
    if getCurrentLocation() == "TRADING_PLAZA" then return true end
    
    pcall(function() Network.Invoke("Travel to Trading Plaza") end)
    task.wait(5)
    
    if getCurrentLocation() ~= "TRADING_PLAZA" then
        pcall(function() TeleportService:Teleport(PLACE_IDS.TRADING_PLAZA_1) end)
        task.wait(5)
    end
    
    return getCurrentLocation() == "TRADING_PLAZA"
end

-- Claim booth function
local function occupyBooth()
    -- Check if already have booth
    for _, Booth in ipairs(workspace.__THINGS.Booths:GetChildren()) do
        if Booth:IsA("Model") and Booth:GetAttribute("Owner") == LocalPlayer.UserId then
            currentBooth = Booth
            LocalPlayer.Character.HumanoidRootPart.CFrame = Booth.Table.CFrame * CFrame.new(5, 0, 0)
            return true
        end
    end

    -- Find and claim nearest booth
    local nearestDistance = math.huge
    local nearestPos, nearestId
    
    for _, v in pairs(workspace.TradingPlaza.BoothSpawns:GetChildren()) do
        if v and v.WorldPivot then
            local boothPos = v.WorldPivot.Position
            local playerPos = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and 
                            LocalPlayer.Character.HumanoidRootPart.Position
            
            if playerPos then
                local dist = (boothPos - playerPos).Magnitude
                if dist < nearestDistance and v:GetAttribute("ID") then
                    nearestDistance = dist
                    nearestPos = boothPos
                    nearestId = v:GetAttribute("ID")
                end
            end
        end
    end
    
    if nearestPos and nearestId then
        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(nearestPos + Vector3.new(-5, 5, 0))
        task.wait(0.5)
        pcall(function() Network.Invoke("Booths_ClaimBooth", tostring(nearestId)) end)
        task.wait(1)
        
        -- Check if claim was successful
        for _, Booth in ipairs(workspace.__THINGS.Booths:GetChildren()) do
            if Booth:IsA("Model") and Booth:GetAttribute("Owner") == LocalPlayer.UserId then
                currentBooth = Booth
                return true
            end
        end
    end
    
    return false
end

-- Calculate pet price with simplified strategy
local function getPetPrice(petData)
    local isHuge = string.find(petData.id, "Huge") and true or false
    
    if not isHuge then
        return DEFAULT_RAP_NORMAL -- Default price for normal pets
    end
    
    -- Determine type
    local typeStr = "All Huges Normal"
    if petData.pt == 1 then typeStr = "All Huges Golden"
    elseif petData.pt == 2 then typeStr = "All Huges Rainbow"
    elseif petData.sh then typeStr = "All Huges Shiny" end
    
    -- Get strategy
    local strategy = getgenv().hugemode[typeStr] and getgenv().hugemode[typeStr].strategy or "-3%"
    
    -- Default multiplier (3% discount)
    local multiplier = 0.97
    
    -- Parse strategy
    if type(strategy) == "string" then
        local sign, pct = strategy:match("^([%+%-])([%d%.]+)%%$")
        pct = tonumber(pct)
        if sign and pct then
            multiplier = sign == "+" and (1 + pct/100) or (1 - pct/100)
        end
    end
    
    -- Calculate price
    local basePrice = DEFAULT_RAP_HUGE
    local price = math.floor(basePrice * multiplier)
    
    -- Add randomness if enabled
    if getgenv().Config["Randomize Price"] then
        local range = getgenv().Config["Random Range"] / 100
        local randomFactor = 1 + ((math.random() * 2 - 1) * range)
        price = math.floor(price * randomFactor)
    end
    
    return price
end

-- Fast listing creation function
local function createListing(uuid, petData)
    if listedItems[uuid] or usedSlots >= MAX_BOOTH_SLOTS then return false end
    
    local price = getPetPrice(petData)
    local isHuge = string.find(petData.id, "Huge") and true or false
    
    local success = pcall(function()
        return Network.Invoke("Booths_CreateListing", uuid, price, 1)
    end)
    
    if success then
        listedItems[uuid] = {
            isHuge = isHuge,
            id = petData.id,
            class = "Pet",
            price = price,
            data = petData,
            time = os.time()
        }
        usedSlots = usedSlots + 1
        return true
    end
    
    return false
end

-- Add item after sale (high priority function)
local function addItemAfterSale()
    if getCurrentLocation() ~= "TRADING_PLAZA" or usedSlots >= MAX_BOOTH_SLOTS then return false end
    
    -- First try to find Huge pets
    for PetId, PetData in pairs(Savemod.Get().Inventory.Pet) do
        if not listedItems[PetId] and string.find(PetData.id, "Huge") then
            if createListing(PetId, PetData) then
                return true
            end
        end
    end
    
    -- Then try normal pets if needed
    for PetId, PetData in pairs(Savemod.Get().Inventory.Pet) do
        if not listedItems[PetId] and not string.find(PetData.id, "Huge") then
            if createListing(PetId, PetData) then
                return true
            end
        end
    end
    
    return false
end

-- Enhanced sale detection (optimized for speed)
spawn(function()
    while task.wait(1) do
        if getCurrentLocation() ~= "TRADING_PLAZA" or not currentBooth then continue end
        
        -- Get current items quickly
        local currentBoothItems = {}
        local foundItems = 0
        
        pcall(function()
            for _, child in pairs(currentBooth.Pets.BoothTop.PetScroll:GetChildren()) do
                if child:IsA("Frame") and child.Name ~= "Template" and child.Visible then
                    foundItems = foundItems + 1
                    local uid = child:GetAttribute("ItemUID") or child:GetAttribute("UID") or child.Name
                    if uid then currentBoothItems[tostring(uid)] = true end
                end
            end
        end)
        
        -- First time setup
        if table.count(lastBoothItems) == 0 then
            lastBoothItems = currentBoothItems
            lastCheckTime = os.time()
            continue
        end
        
        -- Check for sold items
        local itemSold = false
        for uid, itemInfo in pairs(listedItems) do
            if lastBoothItems[uid] and not currentBoothItems[uid] then
                if itemInfo and os.time() - lastCheckTime > 0.5 then
                    -- Item was sold - send webhook
                    SendWebhookSold(itemInfo.id, itemInfo.class, itemInfo.price, itemInfo.data, itemInfo.isHuge)
                    
                    -- Update statistics
                    if itemInfo.isHuge then
                        hugesSold = hugesSold + 1
                    else
                        normalItemsSold = normalItemsSold + 1
                    end
                    
                    -- Remove from tracked items
                    listedItems[uid] = nil
                    itemSold = true
                end
            end
        end
        
        -- If item was sold, add new one immediately
        if itemSold then
            task.spawn(addItemAfterSale)
        end
        
        -- Update slot count and check for 20-slot issue
        usedSlots = foundItems
        
        if usedSlots == 20 then
            if stuckAt20SlotsTime == 0 then
                stuckAt20SlotsTime = os.time()
            elseif os.time() - stuckAt20SlotsTime > 20 then
                fastFillBooth()
                stuckAt20SlotsTime = 0
            end
        else
            stuckAt20SlotsTime = 0
        end
        
        -- Update tracking
        lastBoothItems = currentBoothItems
        lastCheckTime = os.time()
    end
end)

-- Fast booth filler (optimized)
spawn(function()
    while task.wait(5) do
        if getCurrentLocation() ~= "TRADING_PLAZA" or not currentBooth then continue end
        if usedSlots >= MAX_BOOTH_SLOTS then continue end
        
        local itemsNeeded = MAX_BOOTH_SLOTS - usedSlots
        if itemsNeeded <= 0 then continue end
        
        local hugePets = {}
        local normalPets = {}
        
        -- Scan for pets to add (only do once)
        for PetId, PetData in pairs(Savemod.Get().Inventory.Pet) do
            if not listedItems[PetId] then
                if string.find(PetData.id, "Huge") then
                    table.insert(hugePets, {UUID = PetId, Data = PetData})
                else
                    table.insert(normalPets, {UUID = PetId, Data = PetData})
                    -- Limit normal pets scanning to improve performance
                    if #normalPets >= 10 then break end
                end
            end
            
            -- Only scan what we need
            if #hugePets >= itemsNeeded then break end
        end
        
        -- Add huge pets first (they have priority)
        for _, pet in ipairs(hugePets) do
            if usedSlots >= MAX_BOOTH_SLOTS then break end
            createListing(pet.UUID, pet.Data)
            task.wait(0.1) -- Minimal delay
        end
        
        -- If we still need more, add normal pets
        if usedSlots < MAX_BOOTH_SLOTS and #normalPets > 0 then
            for _, pet in ipairs(normalPets) do
                if usedSlots >= MAX_BOOTH_SLOTS then break end
                createListing(pet.UUID, pet.Data)
                task.wait(0.1) -- Minimal delay
            end
        end
    end
end)

-- Server hop logic (simplified)
spawn(function()
    while true do
        task.wait(60)
        local currentTime = os.time()
        if currentTime - lastHopTime >= HOP_SERVER_TIME and getCurrentLocation() == "TRADING_PLAZA" then
            pcall(function()
                local servers = {}
                local req = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"))
                
                for _, server in ipairs(req.data) do
                    if server.playing < server.maxPlayers and server.id ~= game.JobId then
                        table.insert(servers, server.id)
                    end
                end
                
                if #servers > 0 then
                    TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)])
                end
            end)
            
            lastHopTime = currentTime
        end
    end
end)

-- Teleport and booth claiming loop (simplified)
spawn(function()
    while task.wait(5) do
        if getCurrentLocation() ~= "TRADING_PLAZA" then
            teleportToTradingPlaza()
        elseif not currentBooth and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            occupyBooth()
        end
    end
end)

-- Stats display (reduced frequency)
spawn(function()
    while true do
        task.wait(120) -- Show stats every 2 minutes instead of every minute
        print("‚è±Ô∏è Runtime: " .. formatNumber(os.time() - listingStartTime) .. "s | üêæ Huge pets: " .. totalhuge .. 
             " | üìã Listed: " .. usedSlots .. "/" .. MAX_BOOTH_SLOTS)
    end
end)

-- Main initialization
if not waitForGameReady() then return end

-- Simple wait for game to load
function waitForGameReady()
    if not game:IsLoaded() then game.Loaded:Wait() end
    return true
end

-- Script start
print("Auto Seller Script Started")
