-- ƒê·ª£i game t·∫£i ho√†n t·∫•t
if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- Khai b√°o d·ªãch v·ª• v√† th∆∞ vi·ªán
local VirtualUser = game:GetService("VirtualUser")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Library = ReplicatedStorage.Library
local Client = Library.Client
local RAPCmds = require(Client.RAPCmds)
local Network = require(Client.Network)
local Savemod = require(Client.Save)
local Functions = require(ReplicatedStorage.Library.Functions)
local Items = require(ReplicatedStorage.Library.Items.Types)

-- ID c√°c map v√† icon
local TRADING_PLAZA_ICON = "rbxassetid://15048276787" -- Official Trading Plaza icon
local PLACE_IDS = {
    MAIN_WORLD = 8737899170,
    PLAZA_WORLD = 16498369169,
    TRADING_PLAZA_1 = 15588442388,
    TRADING_PLAZA_2 = 15502339080
}

-- H·∫±ng s·ªë ƒë·ªÉ tr√°nh magic numbers
local CONSTANTS = {
    MAX_BOOTH_SLOTS = 25,
    DEFAULT_RAP_HUGE = 10000000, -- 10M m·∫∑c ƒë·ªãnh cho pets Huge
    DEFAULT_RAP_NORMAL = 100000, -- 100K m·∫∑c ƒë·ªãnh cho pets th∆∞·ªùng
    MAX_LISTING_AMOUNT = 15000,
    MAX_LISTING_VALUE = 25000000000, -- 25B
    WAIT_BETWEEN_BOOTH_ATTEMPTS = 5, -- gi√¢y
    WAIT_BETWEEN_LISTINGS = 1, -- gi√¢y
    WAIT_BETWEEN_SCANS = 10, -- gi√¢y
    WAIT_IF_NO_ITEMS = 60, -- gi√¢y
    WAIT_GEMS_CHECK = 30, -- gi√¢y
    MAX_TELEPORT_ATTEMPTS = 3,
    HOP_SERVER_TIME = 60 * 60, -- 60 ph√∫t (3600 gi√¢y)
    ANTI_AFK_INTERVAL = 30 -- 30 gi√¢y
}

-- Bi·∫øn global ƒë·ªÉ theo d√µi
local totalhuge = 0
local listedItems = {}
local currentBooth = nil
local usedSlots = 0
local MAX_BOOTH_SLOTS = CONSTANTS.MAX_BOOTH_SLOTS
-- Th√™m ch·ª©c nƒÉng t√≠nh to√°n th·ªùi gian listing
local listingStartTime = os.time()
-- Th√™m bi·∫øn ƒë·∫øm s·ªë l∆∞·ª£ng Huge ƒë√£ b√°n
local hugesSold = 0
local normalItemsSold = 0
-- Th√™m bi·∫øn theo d√µi th·ªùi gian server hop
local lastHopTime = os.time()

-- H√†m t·∫°o giao di·ªán hi·ªÉn th·ªã
local function createCounterGUI()
    -- T·∫°o ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "HugeCounterGUI"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    -- T·∫°o khung ch√≠nh
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "CounterContainer"
    mainFrame.Size = UDim2.new(0, 200, 0, 60)
    mainFrame.Position = UDim2.new(0, 20, 0, 20)
    mainFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    mainFrame.BackgroundTransparency = 0.2
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    
    -- Th√™m bo g√≥c
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = mainFrame
    
    -- T·∫°o nh√£n Huge Pets
    local hugeLabel = Instance.new("TextLabel")
    hugeLabel.Name = "HugeCounter"
    hugeLabel.Size = UDim2.new(1, -20, 0, 25)
    hugeLabel.Position = UDim2.new(0, 10, 0, 5)
    hugeLabel.BackgroundTransparency = 1
    hugeLabel.Font = Enum.Font.GothamBold
    hugeLabel.TextSize = 16
    hugeLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    hugeLabel.Text = "Huge Pets: Counting..."
    hugeLabel.TextXAlignment = Enum.TextXAlignment.Left
    hugeLabel.Parent = mainFrame
    
    -- T·∫°o nh√£n Gems
    local gemsLabel = Instance.new("TextLabel")
    gemsLabel.Name = "GemCounter"
    gemsLabel.Size = UDim2.new(1, -20, 0, 25)
    gemsLabel.Position = UDim2.new(0, 10, 0, 30)
    gemsLabel.BackgroundTransparency = 1
    gemsLabel.Font = Enum.Font.GothamBold
    gemsLabel.TextSize = 16
    gemsLabel.TextColor3 = Color3.fromRGB(85, 255, 255)
    gemsLabel.Text = "Gems: Counting..."
    gemsLabel.TextXAlignment = Enum.TextXAlignment.Left
    gemsLabel.Parent = mainFrame
    
    return hugeLabel, gemsLabel
end

-- T·∫°o giao di·ªán v√† l·∫•y tham chi·∫øu ƒë·∫øn c√°c nh√£n
local hugeLabel, gemsLabel = createCounterGUI()

-- TH√äM FUNCTIONS CHO WEBHOOK --
-- H√†m ƒë·ªãnh d·∫°ng s·ªë cho webhook
local function Formatint(int)
    local Suffix = {"", "k", "M", "B", "T", "Qd", "Qn", "Sx", "Sp", "Oc", "No", "De", "UDe", "DDe", "TDe", "QdDe", "QnDe", "SxDe", "SpDe", "OcDe", "NoDe", "Vg", "UVg", "DVg", "TVg", "QdVg", "QnVg", "SxVg", "SpVg", "OcVg", "NoVg", "Tg", "UTg", "DTg", "TTg", "QdTg", "QnTg", "SxTg", "SpTg", "OcTg", "NoTg", "QdAg", "QnAg", "SxAg", "SpAg", "OcAg", "NoAg", "e141", "e144", "e147", "e150", "e153", "e156", "e159", "e162", "e165", "e168", "e171", "e174", "e177", "e180", "e183", "e186", "e189", "e192", "e195", "e198", "e201", "e204", "e207", "e210", "e213", "e216", "e219", "e222", "e225", "e228", "e231", "e234", "e237", "e240", "e243", "e246", "e249", "e252", "e255", "e258", "e261", "e264", "e267", "e270", "e273", "e276", "e279", "e282", "e285", "e288", "e291", "e294", "e297", "e300", "e303"}
    local Index = 1
    
    if int < 999 then 
        return int
    end
    while int >= 1000 and Index < #Suffix do
        int = int / 1000
        Index = Index + 1
    end
    return string.format("%.2f%s", int, Suffix[Index])
end

local function GetAsset(Id, pt)
    local Asset = require(Library.Directory.Pets)[Id]
    return string.gsub(Asset and (pt == 1 and Asset.goldenThumbnail or Asset.thumbnail) or "14976456685", "rbxassetid://", "")
end

local function GetStats(Cmds, Class, ItemTable)
    return Cmds.Get({
        Class = { Name = Class },
        IsA = function(InputClass) return InputClass == Class end,
        GetId = function() return ItemTable.id end,
        StackKey = function()
            return HttpService:JSONEncode({id = ItemTable.id, sh = ItemTable.sh, pt = ItemTable.pt, tn = ItemTable.tn})
        end
    }) or nil
end

-- H√†m g·ª≠i th√¥ng b√°o webhook khi b√°n ho·∫∑c list item/pet
local function SendWebhookSold(itemId, itemClass, price, itemData, isHuge, isSold)
    -- Ki·ªÉm tra xem c√≥ b·∫≠t webhook kh√¥ng
    if not getgenv().Config["Enable Webhook Notifications"] or getgenv().Config["Link Webhook"] == "" then
        return
    end
    
    local success, result = pcall(function()
        local pt = itemData.pt or 0
        local sh = itemData.sh or false
        
        -- L·∫•y s·ªë l∆∞·ª£ng Huge c√≤n l·∫°i trong inventory
        local hugesRemaining = 0
        pcall(function()
            for _, pet in pairs(Savemod.Get().Inventory.Pet) do
                if string.find(tostring(pet.id), "Huge") then
                    hugesRemaining = hugesRemaining + 1
                end
            end
        end)
        
        -- L·∫•y s·ªë gems hi·ªán t·∫°i
        local currentGems = 0
        pcall(function()
            if game.Players.LocalPlayer:FindFirstChild("leaderstats") then
                local diamonds = game.Players.LocalPlayer.leaderstats:FindFirstChild("üíé Diamonds")
                if diamonds then
                    currentGems = diamonds.Value
                end
            end
        end)
        
        -- L·∫•y h√¨nh ·∫£nh v√† th√¥ng tin
        local Img
        if itemClass == "Pet" then
            Img = string.format("https://biggamesapi.io/image/%s", GetAsset(itemId, pt))
        else
            -- C·ªë g·∫Øng l·∫•y h√¨nh ·∫£nh cho item kh√¥ng ph·∫£i pet
            pcall(function()
                local thumbnail = require(Library.Directory.Items)[itemId] and require(Library.Directory.Items)[itemId].thumbnail
                if thumbnail then
                    Img = string.gsub(thumbnail, "rbxassetid://", "https://biggamesapi.io/image/")
                else
                    Img = "https://biggamesapi.io/image/14976456685" -- H√¨nh ·∫£nh m·∫∑c ƒë·ªãnh
                end
            end)
        end
        
        local Version = ""
        if itemClass == "Pet" then
            Version = pt == 1 and "Golden " or pt == 2 and "Rainbow " or ""
        end
        
        local ItemType = isHuge and "üî¥ HUGE PET" or "üîµ ITEM"
        local ActionType = isSold and "ƒê√£ b√°n" or "ƒê√£ list"
        local Title = string.format("||%s|| %s %s%s%s v·ªõi gi√° %s gems", 
            game.Players.LocalPlayer.Name, 
            ActionType,
            Version, 
            sh and "Shiny " or "", 
            itemId, 
            Formatint(price))

        -- Th·ª≠ l·∫•y th√¥ng tin Exist v√† RAP
        local Exist, Rap
        pcall(function()
            local ExistCmds = require(Client.ExistCountCmds)
            Exist = GetStats(ExistCmds, itemClass, { id = itemId, pt = pt, sh = sh, tn = nil })
            Rap = GetStats(RAPCmds, itemClass, { id = itemId, pt = pt, sh = sh, tn = nil })
        end)

        local Body = HttpService:JSONEncode({
            content = Config["Webhook ID"] ~= "" and string.format("<@%s>", Config["Webhook ID"]) or "",
            embeds = {
                {
                    title = Title,
                    description = ItemType,
                    color = isHuge and 16711680 or 255, -- M√†u ƒë·ªè cho Huge, m√†u xanh cho item th∆∞·ªùng
                    timestamp = DateTime.now():ToIsoDate(),
                    thumbnail = { url = Img },
                    fields = {
                        { 
                            name = "üí∞ Th√¥ng tin b√°n h√†ng",
                            value = string.format("üè∑Ô∏è **Lo·∫°i**: `%s`\nüíé **Gi√°**: `%s gems`\nüí† **RAP**: `%s`\nüí´ **Exist**: `%s`", 
                                itemClass,
                                Formatint(price), 
                                Formatint(Rap or 0), 
                                Formatint(Exist or 0))
                        },
                        {
                            name = "üìä Th√¥ng tin t√†i kho·∫£n",
                            value = string.format("üêæ **Huge c√≤n l·∫°i**: `%s`\nüí∞ **Gems hi·ªán t·∫°i**: `%s`", 
                                hugesRemaining, 
                                Formatint(currentGems))
                        }
                    },
                    footer = { text = "Auto Seller | " .. os.date("%d/%m/%Y %H:%M:%S") }
                }
            }
        })
        
        request({
            Url = Config["Link Webhook"],
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = Body
        })
        
        local logMessage = string.format("‚úÖ ƒê√£ g·ª≠i webhook cho %s %s | Gi√°: %s | Gems: %s",
            isHuge and "HUGE PET" or "ITEM", 
            itemId, 
            Formatint(price), 
            Formatint(currentGems))
        print(logMessage)
    end)
    
    if not success then
        warn("‚ùå L·ªói g·ª≠i webhook: " .. tostring(result))
    end
end
-- K·∫æT TH√öC TH√äM FUNCTIONS CHO WEBHOOK --

-- H√†m ƒë·ªãnh d·∫°ng s·ªë v·ªõi h·∫≠u t·ªë
local function formatNumber(num)
    if num >= 1e12 then return string.format("%.1fT", num/1e12)
    elseif num >= 1e9 then return string.format("%.1fB", num/1e9)
    elseif num >= 1e6 then return string.format("%.1fM", num/1e6)
    elseif num >= 1e3 then return string.format("%.1fK", num/1e3)
    else return tostring(num) end
end

-- T·∫°o h√†m ƒë·∫øm Huge Pets c·∫£i ti·∫øn
local function countHugePets()
    local count = 0
    local success, errorMsg = pcall(function()
        -- Th·ª≠ nhi·ªÅu c·∫•u tr√∫c d·ªØ li·ªáu c√≥ th·ªÉ c√≥
        local save = Savemod.Get()
        
        -- C·∫•u tr√∫c 1: Truy c·∫≠p tr·ª±c ti·∫øp ƒë·∫øn Inventory.Pet
        if save and save.Inventory and save.Inventory.Pet then
            for _, pet in pairs(save.Inventory.Pet) do
                if typeof(pet) == "table" and pet.id and string.find(tostring(pet.id), "Huge") then
                    count = count + 1
                end
            end
            return
        end
        
        -- C·∫•u tr√∫c 2: V·ªã tr√≠ thay th·∫ø c√≥ th·ªÉ
        if save and save.Pets then
            for _, pet in pairs(save.Pets) do
                if typeof(pet) == "table" and (pet.id or pet.n) then
                    local petId = pet.id or pet.n or ""
                    if string.find(tostring(petId), "Huge") then
                        count = count + 1
                    end
                end
            end
            return
        end
        
        -- C·∫•u tr√∫c 3: T√¨m ki·∫øm t·∫•t c·∫£ container pet c√≥ th·ªÉ
        for key, value in pairs(save or {}) do
            if typeof(value) == "table" then
                for _, possiblePet in pairs(value) do
                    if typeof(possiblePet) == "table" and (possiblePet.id or possiblePet.n) then
                        local petId = possiblePet.id or possiblePet.n or ""
                        if string.find(tostring(petId), "Huge") then
                            count = count + 1
                        end
                    end
                end
            end
        end
    end)
    
    if not success then
        warn("Kh√¥ng th·ªÉ ƒë·∫øm Huge pets: " .. tostring(errorMsg))
        return -1 -- Ch·ªâ b√°o l·ªói
    end
    
    return count
end

-- C·∫≠p nh·∫≠t c√°c b·ªô ƒë·∫øm
spawn(function()
    while task.wait(2) do
        -- ƒê·∫øm Huge Pets
        local hugeCount = countHugePets()
        if hugeCount >= 0 then
            hugeLabel.Text = "Huge Pets: " .. formatNumber(hugeCount)
            -- C·∫≠p nh·∫≠t bi·∫øn to√†n c·ª•c
            totalhuge = hugeCount
        else
            hugeLabel.Text = "Huge Pets: 0"
            warn("S·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh cho b·ªô ƒë·∫øm Huge Pets")
        end
        
        -- ƒê·∫øm Gems
        local gemCount = 0
        local success, gemErr = pcall(function()
            if game.Players.LocalPlayer:FindFirstChild("leaderstats") then
                local diamonds = game.Players.LocalPlayer.leaderstats:FindFirstChild("üíé Diamonds")
                if diamonds then
                    gemCount = diamonds.Value
                end
            end
        end)
        
        if success then
            gemsLabel.Text = "Gems: " .. formatNumber(gemCount)
        else
            gemsLabel.Text = "Gems: 0"
            warn("L·ªói ƒë·∫øm Gems: " .. tostring(gemErr))
        end
    end
end)

-- H√†m debug gi√° ƒë·ªÉ x√°c ƒë·ªãnh v·∫•n ƒë·ªÅ (ƒë∆°n gi·∫£n h√≥a)
local function debugPrice(petId, originalRap, calculatedPrice, strategy, finalPrice)
    if not getgenv().Config["Debug Mode"] then return end
    
    print("===== DEBUG PRICE CALCULATION =====")
    print("Pet ID: " .. petId)
    print("Original RAP: " .. originalRap)
    print("Strategy: " .. strategy)
    print("Calculated Price: " .. calculatedPrice)
    print("==================================")
end

local function getElapsedTimeString()
    local elapsedSeconds = os.time() - listingStartTime
    local hours = math.floor(elapsedSeconds / 3600)
    local minutes = math.floor((elapsedSeconds % 3600) / 60)
    local seconds = elapsedSeconds % 60
    return string.format("%02d:%02d:%02d", hours, minutes, seconds)
end

-- Ch·ªëng AFK n√¢ng cao
-- V√¥ hi·ªáu h√≥a c√°c k·∫øt n·ªëi IdleEvent
for _, v in pairs(getconnections(LocalPlayer.Idled)) do v:Disable() end

-- Anti-AFK v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p
spawn(function()
    while true do
        task.wait(CONSTANTS.ANTI_AFK_INTERVAL)
        
        -- Ph∆∞∆°ng ph√°p 1: VirtualUser ClickButton
        pcall(function()
            VirtualUser:ClickButton2(Vector2.new(math.random(100, 900), math.random(100, 900)))
        end)
        
        -- Ph∆∞∆°ng ph√°p 2: CaptureController
        pcall(function()
            if game:GetService("VirtualInputManager") then
                game:GetService("VirtualInputManager"):SendKeyEvent(true, "w", false, game)
                task.wait(0.1)
                game:GetService("VirtualInputManager"):SendKeyEvent(false, "w", false, game)
            end
        end)
        
        -- Ph∆∞∆°ng ph√°p 3: Di chuy·ªÉn nh·∫π nh√¢n v·∫≠t
        pcall(function()
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
                LocalPlayer.Character.Humanoid:ChangeState(11) -- Jump state
                task.wait(0.1)
            end
        end)
        
        -- Ph∆∞∆°ng ph√°p 4: D·ª´ng timer idle tracking
        pcall(function()
            Network.Fire("Idle Tracking: Stop Timer")
        end)
        
        if getgenv().Config["Debug Mode"] then
            print("üïí Anti-AFK ho·∫°t ƒë·ªông...")
        end
    end
end)

-- Hook ƒë·ªÉ ch·ªëng server closing ho·∫∑c idle tracking
local old
old = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    if not checkcaller() then
        local Name = tostring(self)
        if table.find({"Server Closing", "Idle Tracking: Update Timer", "Move Server", "AFK Kick", "AFK Warning"}, Name) then
            return nil
        end
    end
    return old(self, ...)
end)

-- ƒê·ª£i giao di·ªán v√† leaderstats s·∫µn s√†ng
local function waitForGameReady()
    local success, result = pcall(function()
        -- ƒê·ª£i UI v√† leaderstats
        while not (game:IsLoaded() and
               LocalPlayer:FindFirstChild("PlayerGui") and
               not LocalPlayer.PlayerGui:FindFirstChild("__INTRO") and
               LocalPlayer.PlayerGui:FindFirstChild("MainLeft") and
               LocalPlayer.PlayerGui.MainLeft.Left.Currency.Diamonds.Diamonds.Visible == true and
               not LocalPlayer:FindFirstChild("GUIFX Holder")) do
            task.wait(0.5)
        end
        
        -- ƒê·ª£i leaderstats
        local timeout = 30 -- gi√¢y
        local startTime = tick()
        while not (LocalPlayer:FindFirstChild("leaderstats") and LocalPlayer.leaderstats:FindFirstChild("üíé Diamonds")) do
            if tick() - startTime > timeout then
                warn("Timeout ch·ªù leaderstats['üíé Diamonds']")
                return false
            end
            task.wait(0.5)
        end
        
        return true
    end)
    
    if not success or not result then
        warn("L·ªói khi ƒë·ª£i game s·∫µn s√†ng: " .. tostring(result))
        return false
    end
    
    return true
end

-- ƒê·ª£i game s·∫µn s√†ng
if not waitForGameReady() then
    warn("Game kh√¥ng s·∫µn s√†ng, k·∫øt th√∫c script")
    return
end

print("Game ƒë√£ s·∫µn s√†ng, b·∫Øt ƒë·∫ßu ch·∫°y script")

-- H√†m ki·ªÉm tra v·ªã tr√≠ hi·ªán t·∫°i
local function getCurrentLocation()
    local currentPlaceId = game.PlaceId
    
    if currentPlaceId == PLACE_IDS.MAIN_WORLD then
        return "MAIN_WORLD"
    elseif currentPlaceId == PLACE_IDS.PLAZA_WORLD then
        return "PLAZA_WORLD"
    elseif currentPlaceId == PLACE_IDS.TRADING_PLAZA_1 or currentPlaceId == PLACE_IDS.TRADING_PLAZA_2 then
        return "TRADING_PLAZA"
    else
        return "UNKNOWN_" .. tostring(currentPlaceId)
    end
end

-- H√†m teleport ƒë·∫øn Trading Plaza n√¢ng cao
local function teleportToTradingPlaza()
    local currentLocation = getCurrentLocation()
    print("V·ªã tr√≠ hi·ªán t·∫°i: " .. currentLocation)
    
    if currentLocation == "TRADING_PLAZA" then
        print("ƒê√£ ·ªü Trading Plaza, kh√¥ng c·∫ßn teleport")
        return true
    end
    
    print("ƒêang teleport ƒë·∫øn Trading Plaza...")
    
    -- Ph∆∞∆°ng ph√°p 1: S·ª≠ d·ª•ng Network.Invoke
    local success1 = pcall(function()
        Network.Invoke("Travel to Trading Plaza")
        print("ƒê√£ g·ªçi Travel to Trading Plaza")
        task.wait(5)
    end)
    
    -- Ki·ªÉm tra l·∫°i v·ªã tr√≠ sau ph∆∞∆°ng ph√°p 1
    if getCurrentLocation() == "TRADING_PLAZA" then
        print("Ph∆∞∆°ng ph√°p 1 th√†nh c√¥ng!")
        return true
    end
    
    -- Ph∆∞∆°ng ph√°p 2: T√¨m v√† s·ª≠ d·ª•ng c·ªïng Trading Plaza
    print("Ph∆∞∆°ng ph√°p 1 th·∫•t b·∫°i, th·ª≠ ph∆∞∆°ng ph√°p 2...")
    local success2 = pcall(function()
        -- T√¨m c·ªïng Trading Plaza trong khu v·ª±c Castle
        local ZonesUtil = require(ReplicatedStorage.Library.Util.ZonesUtil)
        local castleFolder = ZonesUtil.GetInteractFolder and ZonesUtil.GetInteractFolder("Castle")
        
        if castleFolder then
            local portal = castleFolder:FindFirstChild("TradingPlazaPortal")
            if portal and portal:FindFirstChild("InteractHolder") then
                -- Teleport ƒë·∫øn v·ªã tr√≠ c·ªïng
                local portalPos = portal.InteractHolder.Position
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(portalPos)
                    task.wait(1)
                    
                    -- T∆∞∆°ng t√°c v·ªõi c·ªïng
                    Network.Fire("Teleporting to Trading Plaza!")
                    Network.Invoke("Travel to Trading Plaza")
                    task.wait(3)
                end
            end
        end
    end)
    
    -- Ki·ªÉm tra l·∫°i v·ªã tr√≠ sau ph∆∞∆°ng ph√°p 2
    if getCurrentLocation() == "TRADING_PLAZA" then
        print("Ph∆∞∆°ng ph√°p 2 th√†nh c√¥ng!")
        return true
    end
    
    -- Ph∆∞∆°ng ph√°p 3: S·ª≠ d·ª•ng TeleportService tr·ª±c ti·∫øp
    print("Ph∆∞∆°ng ph√°p 2 th·∫•t b·∫°i, th·ª≠ ph∆∞∆°ng ph√°p 3...")
    local success3 = pcall(function()
        TeleportService:Teleport(PLACE_IDS.TRADING_PLAZA_1)
        task.wait(5)
    end)
    
    print("ƒê√£ th·ª≠ t·∫•t c·∫£ ph∆∞∆°ng ph√°p teleport")
    return (getCurrentLocation() == "TRADING_PLAZA")
end

-- Cache cho RAP ƒë·ªÉ tr√°nh t√≠nh to√°n l·∫°i
local rapCache = {}

-- H√†m t√≠nh RAP v·ªõi cache
local function GetRap(itemClass, itemData)
    -- T·∫°o key cho cache
    local cacheKey = itemClass .. "_" .. itemData.id
    if itemData.sh then cacheKey = cacheKey .. "_shiny" end
    if itemData.pt == 1 then cacheKey = cacheKey .. "_golden" end
    if itemData.pt == 2 then cacheKey = cacheKey .. "_rainbow" end
    
    -- Ki·ªÉm tra cache tr∆∞·ªõc
    if rapCache[cacheKey] then
        return rapCache[cacheKey]
    end
    
    -- T√≠nh RAP n·∫øu kh√¥ng c√≥ trong cache
    local ok, result = pcall(function()
        -- kh·ªüi t·∫°o item object
        local itm = require(Library.Items[itemClass .. "Item"])(itemData.id)
        if itemData.sh then itm:SetShiny(true) end
        if itemData.pt == 1 then itm:SetGolden() end
        if itemData.pt == 2 then itm:SetRainbow() end
        return itm:GetRAP() or 0
    end)
    
    if not ok then
        warn("L·ªói GetRap:", result)
        return 0
    end
    
    -- L∆∞u v√†o cache
    rapCache[cacheKey] = result
    return result
end

-- H√†m chi·∫øm gian h√†ng
local function occupyBooth()
    local success, result = pcall(function()
        -- Ki·ªÉm tra xem ƒë√£ c√≥ gian h√†ng ch∆∞a
        local HaveBooth = false
        for _, Booth in ipairs(workspace.__THINGS.Booths:GetChildren()) do
            if Booth:IsA("Model") and Booth:GetAttribute("Owner") == LocalPlayer.UserId then
                HaveBooth = true
                currentBooth = Booth
                LocalPlayer.Character.HumanoidRootPart.CFrame = Booth.Table.CFrame * CFrame.new(5, 0, 0)
                print("ƒê√£ t√¨m th·∫•y gian h√†ng c·ªßa b·∫°n!")
                return true
            end
        end

        if not HaveBooth then
            -- T√¨m gian h√†ng g·∫ßn nh·∫•t ƒë·ªÉ chi·∫øm
            local pos, id
            local distance = math.huge
            local playerPos = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and LocalPlayer.Character.HumanoidRootPart.Position
            if not playerPos then return false end

            for _, v in pairs(workspace.TradingPlaza.BoothSpawns:GetChildren()) do
                if v and v.WorldPivot then
                    local boothPosition = v.WorldPivot.Position
                    local currentDistance = (boothPosition - playerPos).Magnitude
                    local boothId = v:GetAttribute("ID")
                    if boothId and currentDistance < distance then
                        distance = currentDistance
                        pos = boothPosition
                        id = boothId
                    end
                end
            end

            if pos and id then
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(pos + Vector3.new(-5, 5, 0))
                task.wait(0.5)
                local claimSuccess = pcall(function()
                    Network.Invoke("Booths_ClaimBooth", tostring(id))
                end)
                if claimSuccess then
                    print("ƒê√£ chi·∫øm gian h√†ng ID: " .. id)
                    return true
                else
                    warn("Kh√¥ng th·ªÉ chi·∫øm gian h√†ng")
                    return false
                end
            else
                warn("Kh√¥ng t√¨m th·∫•y gian h√†ng g·∫ßn!")
                return false
            end
        end
    end)
    
    if not success then
        warn("L·ªói khi chi·∫øm gian h√†ng: " .. tostring(result))
        return false
    end
    
    return result
end

-- H√†m g·ª≠i kim c∆∞∆°ng
local function sendGems()
    local success, result = pcall(function()
        local targetUser = getgenv().Config["Account Hold Gem"]
        if targetUser == "" then
            warn("Ch∆∞a c·∫•u h√¨nh t√†i kho·∫£n nh·∫≠n kim c∆∞∆°ng")
            return false
        end
        
        local diamondThreshold = Functions.ParseNumberSmart(getgenv().Config["Gem"])
        local currentDiamonds = LocalPlayer.leaderstats["üíé Diamonds"].Value
        
        if currentDiamonds >= diamondThreshold then
            -- T√¨m ID c·ªßa kim c∆∞∆°ng
            for i, v in pairs(Savemod.Get().Inventory.Currency) do
                if v.id == "Diamonds" then
                    -- Gi·ªØ l·∫°i 1 t·ª∑ kim c∆∞∆°ng
                    local amountToSend = currentDiamonds - Functions.ParseNumberSmart("1b")
                    
                    -- G·ª≠i kim c∆∞∆°ng
                    local args = {
                        [1] = targetUser,
                        [2] = "T·ª± ƒë·ªông g·ª≠i t·ª´ script",
                        [3] = "Currency",
                        [4] = tostring(i),
                        [5] = amountToSend
                    }
                    
                    ReplicatedStorage.Network["Mailbox: Send"]:InvokeServer(unpack(args))
                    print("ƒê√£ g·ª≠i " .. tostring(amountToSend) .. " kim c∆∞∆°ng ƒë·∫øn " .. targetUser)
                    return true
                end
            end
            warn("Kh√¥ng t√¨m th·∫•y ID kim c∆∞∆°ng")
        end
        
        return false
    end)
    
    if not success then
        warn("L·ªói khi g·ª≠i kim c∆∞∆°ng: " .. tostring(result))
        return false
    end
    
    return result
end

-- ƒê·∫øm s·ªë slot ƒë√£ s·ª≠ d·ª•ng trong gian h√†ng
local function countUsedBoothSlots()
    local count = 0
    local success, result = pcall(function()
        if not currentBooth then return 0 end
        
        for _, child in pairs(currentBooth.Pets.BoothTop.PetScroll:GetChildren()) do
            if child:IsA("Frame") then
                count = count + 1
            end
        end
        
        return count
    end)
    
    if not success then
        warn("L·ªói khi ƒë·∫øm slot gian h√†ng: " .. tostring(result))
        return 0
    end
    
    return count
end

-- L∆ØU √ù: H√†m x√≥a listing n√†y s·∫Ω KH√îNG ƒë∆∞·ª£c g·ªçi t·ª± ƒë·ªông
-- Ch·ªâ gi·ªØ h√†m n√†y ƒë·ªÉ tham kh·∫£o, kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng
local function removeAllListings_DISABLED()
    print("‚ö†Ô∏è KH√îNG T·ª∞ ƒê·ªòNG X√ìA LISTING - H√ÄM N√ÄY KH√îNG ƒê∆Ø·ª¢C S·ª¨ D·ª§NG")
    return false
end

-- H√†m x√°c ƒë·ªãnh lo·∫°i pet Huge
local function getHugeType(petId, petData)
    if petData.pt == 1 or string.find(petId, "Golden") then
        return "All Huges Golden"
    elseif petData.pt == 2 or string.find(petId, "Rainbow") then
        return "All Huges Rainbow"
    elseif petData.sh or string.find(petId, "Shiny") then
        return "All Huges Shiny"
    else
        return "All Huges Normal"
    end
end

-- T√≠nh gi√° d·ª±a tr√™n chi·∫øn l∆∞·ª£c (t·ªëi ∆∞u h√≥a)
local function calculatePrice(rap, strategy)
    -- X·ª≠ l√Ω chi·∫øn l∆∞·ª£c kh√¥ng h·ª£p l·ªá
    if not strategy or strategy == "" then
        strategy = "-2%" -- M·∫∑c ƒë·ªãnh gi·∫£m 2%
    end
    
    -- Chu·∫©n h√≥a c√°c lo·∫°i chi·∫øn l∆∞·ª£c
    local multiplier = 1
    local desc = strategy
    
    -- X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
    if strategy == "market" then
        -- Gi·ªØ nguy√™n gi√°
        multiplier = 1
    elseif strategy == "auto" then
        -- T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh d·ª±a tr√™n s·ªë slot ƒë√£ d√πng
        local used = usedSlots / MAX_BOOTH_SLOTS
        if used > 0.8 then 
            multiplier = 0.9      -- Gi·∫£m 10% n·∫øu s·ª≠ d·ª•ng >80% slots
        elseif used > 0.5 then 
            multiplier = 0.95     -- Gi·∫£m 5% n·∫øu s·ª≠ d·ª•ng >50% slots
        end
    elseif type(strategy) == "string" then
        -- X·ª≠ l√Ω chu·ªói nh∆∞ "+10%" ho·∫∑c "-2%"
        local sign, pct = strategy:match("^([%+%-])([%d%.]+)%%$")
        pct = tonumber(pct)
        if sign and pct then
            if sign == "+" then
                multiplier = 1 + (pct/100)
            elseif sign == "-" then
                multiplier = 1 - (pct/100)
            end
        end
    elseif type(strategy) == "number" then
        -- X·ª≠ l√Ω s·ªë tr·ª±c ti·∫øp
        multiplier = 1 + (strategy/100)
        desc = (strategy >= 0 and "+" or "") .. strategy .. "%"
    end
    
    -- T√≠nh gi√° c∆° b·∫£n
    local price = math.floor(rap * multiplier)
    
    -- Th√™m ƒë·ªô ng·∫´u nhi√™n n·∫øu ƒë∆∞·ª£c b·∫≠t
    if getgenv().Config["Randomize Price"] then
        local range = getgenv().Config["Random Range"] / 100
        local randomFactor = 1 + ((math.random() * 2 - 1) * range)
        price = math.floor(price * randomFactor)
    end
    
    return price, desc
end

-- H√†m t·∫°o listing cho pet Huge (t·ªëi ∆∞u h√≥a)
local function createHugeListing(uuid, petData)
    -- Ki·ªÉm tra xem l√† pet Huge kh√¥ng
    if not string.find(petData.id, "Huge") then
        return false
    end
    
    print("üìã ƒêang x·ª≠ l√Ω pet: " .. petData.id)
    
    -- L·∫•y RAP t·ª´ cache ho·∫∑c t√≠nh m·ªõi
    local rap = GetRap("Pet", petData)
    if rap <= 0 then
        rap = CONSTANTS.DEFAULT_RAP_HUGE
        print("‚ö†Ô∏è Kh√¥ng th·ªÉ t√≠nh RAP cho " .. petData.id .. ", s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh: " .. CONSTANTS.DEFAULT_RAP_HUGE)
    end

    -- L·∫•y c·∫•u h√¨nh d·ª±a tr√™n lo·∫°i pet
    local typeString = getHugeType(petData.id, petData)
    local hugeConfig = getgenv().hugemode[typeString]
    
    -- ƒê·∫£m b·∫£o lu√¥n c√≥ c·∫•u h√¨nh h·ª£p l·ªá
    if not hugeConfig then
        hugeConfig = getgenv().hugemode["All Huges Normal"] or {
            strategy = "-2%",
            sell = true
        }
    end
    
    -- Lu√¥n b√°n t·∫•t c·∫£ pet Huge
    hugeConfig.sell = true
    
    -- T√≠nh gi√° an to√†n
    local calculatedPrice, strategyDescription
    local ok = pcall(function()
        calculatedPrice, strategyDescription = calculatePrice(rap, hugeConfig.strategy)
    end)
    
    if not ok or not calculatedPrice then
        calculatedPrice = math.floor(rap * 0.98) -- M·∫∑c ƒë·ªãnh gi·∫£m 2%
        strategyDescription = "-2%"
    end
    
    -- B·ªè qua gi·ªõi h·∫°n gi√°, s·ª≠ d·ª•ng tr·ª±c ti·∫øp gi√° ƒë√£ t√≠nh
    local finalPrice = calculatedPrice
    
    -- Debug th√¥ng tin t√≠nh gi√° n·∫øu c·∫ßn
    if getgenv().Config["Debug Mode"] then
        pcall(function()
            debugPrice(petData.id, rap, calculatedPrice, strategyDescription, finalPrice)
        end)
    end
    
    -- Ki·ªÉm tra gi√° h·ª£p l·ªá
    if finalPrice <= 0 then
        finalPrice = CONSTANTS.DEFAULT_RAP_HUGE / 2 -- M·∫∑c ƒë·ªãnh n·∫øu gi√° sai
        print("‚ö†Ô∏è Gi√° kh√¥ng h·ª£p l·ªá cho " .. petData.id .. ", d√πng m·∫∑c ƒë·ªãnh")
    end
    
    -- T√≠nh s·ªë l∆∞·ª£ng t·ªëi ƒëa c√≥ th·ªÉ b√°n
    local maxAmount = math.min(
        petData._am or 1, 
        CONSTANTS.MAX_LISTING_AMOUNT, 
        math.floor(CONSTANTS.MAX_LISTING_VALUE / finalPrice)
    )
    
    if maxAmount <= 0 then maxAmount = 1 end
    
    print("üè∑Ô∏è ƒêang b√°n " .. petData.id .. " v·ªõi gi√° " .. finalPrice)
    
    -- T·∫°o listing an to√†n
    local success, result = pcall(function()
        return Network.Invoke("Booths_CreateListing", uuid, math.ceil(finalPrice), maxAmount)
    end)
    
    if success and result then
        -- L∆∞u th√¥ng tin chi ti·∫øt v·ªÅ Huge pet ƒë√£ listing
        listedItems[uuid] = {
            isHuge = true,
            id = petData.id,
            class = "Pet",
            price = finalPrice,
            data = petData,
            time = os.time()
        }
        usedSlots = usedSlots + 1
        hugesSold = hugesSold + 1
        print("‚úÖ ƒê√É LIST PET HUGE: " .. petData.id .. " v·ªõi gi√° " .. finalPrice .. " (Slot " .. usedSlots .. "/" .. MAX_BOOTH_SLOTS .. ")")
        
        -- G·ª≠i webhook khi list Huge pet th√†nh c√¥ng
        if getgenv().Config["Enable Webhook Notifications"] then
            SendWebhookSold(petData.id, "Pet", finalPrice, petData, true, false)
        end
        
        return true
    else
        warn("‚ùå KH√îNG TH·ªÇ B√ÅN PET: " .. tostring(result or "L·ªói kh√¥ng x√°c ƒë·ªãnh"))
        return false
    end
end

-- H√†m t·∫°o listing cho v·∫≠t ph·∫©m
local function createItemListing(uuid, itemId, itemClass, amount, rap)
    -- Ki·ªÉm tra xem ƒë√£ list item n√†y ch∆∞a
    if listedItems[uuid] then return false end
    
    -- Ki·ªÉm tra xem c√≤n slot tr·ªëng kh√¥ng
    if usedSlots >= MAX_BOOTH_SLOTS then
        print("ƒê√£ ƒë·∫°t gi·ªõi h·∫°n " .. MAX_BOOTH_SLOTS .. " slot gian h√†ng")
        return false
    end
    
    local price = 0
    -- Ki·ªÉm tra xem c√≥ c·∫•u h√¨nh cho item n√†y kh√¥ng
    if getgenv().item[itemId] then
        price = math.floor(rap * (getgenv().item[itemId] / 100))
    else
        return false
    end
    
    -- ƒê·∫£m b·∫£o gi√° h·ª£p l·ªá
    if price <= 0 then
        price = rap / 2 -- M·∫∑c ƒë·ªãnh n·ª≠a gi√° RAP
        print("‚ö†Ô∏è Gi√° kh√¥ng h·ª£p l·ªá cho " .. itemId .. ", d√πng n·ª≠a gi√° RAP")
    end
    
    -- T√≠nh s·ªë l∆∞·ª£ng t·ªëi ƒëa
    local listingAmount = math.min(amount, CONSTANTS.MAX_LISTING_AMOUNT, math.floor(CONSTANTS.MAX_LISTING_VALUE / price))
    if listingAmount <= 0 then listingAmount = 1 end
    
    -- T·∫°o listing
    local success, result = pcall(function()
        return Network.Invoke("Booths_CreateListing", uuid, math.ceil(price), listingAmount)
    end)
    
    if success and result then
        -- L∆∞u th√¥ng tin chi ti·∫øt v·ªÅ item ƒë√£ listing
        listedItems[uuid] = {
            isHuge = false,
            id = itemId,
            class = itemClass,
            price = price,
            data = {id = itemId, _am = listingAmount},
            time = os.time()
        }
        usedSlots = usedSlots + 1
        normalItemsSold = normalItemsSold + 1
        print("‚úÖ ƒê√£ list item: " .. itemId .. " v·ªõi gi√° " .. price .. " (Slot " .. usedSlots .. "/" .. MAX_BOOTH_SLOTS .. ")")
        
        -- G·ª≠i webhook khi list item th√†nh c√¥ng
        if getgenv().Config["Enable Webhook Notifications"] then
            SendWebhookSold(itemId, itemClass, price, {id = itemId}, false, false)
        }
        
        return true
    else
        warn("‚ùå Kh√¥ng th·ªÉ b√°n v·∫≠t ph·∫©m: " .. tostring(result or "L·ªói kh√¥ng x√°c ƒë·ªãnh"))
        return false
    end
end

-- H√†m qu√©t t·∫•t c·∫£ pet Huge v√† s·∫Øp x·∫øp ch√∫ng
local function scanAndSortHugePets()
    local normalHuges = {}
    local otherHuges = {}
    local totalHuges = 0
    
    -- Qu√©t t·∫•t c·∫£ pet trong inventory
    for PetId, PetData in pairs(Savemod.Get().Inventory.Pet) do
        if string.find(PetData.id, "Huge") and not listedItems[PetId] then
            totalHuges = totalHuges + 1
            
            -- L·∫•y RAP t·ª´ cache ho·∫∑c t√≠nh m·ªõi
            local rap = GetRap("Pet", PetData)
            if rap <= 0 then rap = CONSTANTS.DEFAULT_RAP_HUGE end
            
            local typeString = getHugeType(PetData.id, PetData)
            local hugeInfo = {
                UUID = PetId,
                Item = PetData,
                Class = "Pet",
                Rap = rap,
                Type = "Huge",
                HugeType = typeString
            }
            
            -- Ph√¢n lo·∫°i theo ki·ªÉu
            if typeString == "All Huges Normal" then
                table.insert(normalHuges, hugeInfo)
                if getgenv().Config["Debug Mode"] then
                    print("T√¨m th·∫•y Huge th∆∞·ªùng: " .. PetData.id .. " (RAP: " .. rap .. ")")
                end
            else
                table.insert(otherHuges, hugeInfo)
                if getgenv().Config["Debug Mode"] then
                    print("T√¨m th·∫•y Huge ƒë·∫∑c bi·ªát: " .. PetData.id .. " (" .. typeString .. ", RAP: " .. rap .. ")")
                end
            end
        end
    end
    
    -- S·∫Øp x·∫øp c·∫£ hai danh s√°ch theo RAP
    local sortFunc
    if getgenv().Config["Prioritize Low RAP"] then
        sortFunc = function(a, b) return a.Rap < b.Rap end
    else
        sortFunc = function(a, b) return a.Rap > b.Rap end
    end
    
    table.sort(normalHuges, sortFunc)
    table.sort(otherHuges, sortFunc)
    
    -- G·ªôp danh s√°ch v·ªõi th·ª© t·ª± Huge th∆∞·ªùng tr∆∞·ªõc
    local result = {}
    for _, pet in ipairs(normalHuges) do table.insert(result, pet) end
    for _, pet in ipairs(otherHuges) do table.insert(result, pet) end
    
    print("ƒê√£ t√¨m th·∫•y " .. totalHuges .. " pet Huge (" .. #normalHuges .. " th∆∞·ªùng, " .. #otherHuges .. " ƒë·∫∑c bi·ªát)")
    
    return result, totalHuges
end

-- H√†m t√¨m v√† ch·ªçn server t·ªët nh·∫•t ƒë·ªÉ hop
local function findBestServer()
    local servers = {}
    local preferredPlayerCount = {10, 15, 20, 25} -- ∆Øu ti√™n server c√≥ s·ªë ng∆∞·ªùi ch∆°i n√†y
    
    local success, result = pcall(function()
        local req = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"))
        return req
    end)
    
    if not success or not result or not result.data then
        warn("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin server, th·ª≠ l·∫°i...")
        return nil
    end
    
    -- L·ªçc server c√≥ th·ªÉ tham gia
    for _, server in ipairs(result.data) do
        if server.playing < server.maxPlayers and server.id ~= game.JobId then
            table.insert(servers, server)
        end
    end
    
    if #servers == 0 then
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y server ph√π h·ª£p ƒë·ªÉ hop")
        return nil
    end
    
    -- T√¨m server g·∫ßn v·ªõi s·ªë l∆∞·ª£ng ng∆∞·ªùi ch∆°i t·ªëi ∆∞u
    local bestServer = nil
    local bestScore = -1
    
    for _, server in ipairs(servers) do
        local playerScore = 0
        -- ∆Øu ti√™n server c√≥ s·ªë ng∆∞·ªùi ch∆°i trong kho·∫£ng t·ªëi ∆∞u
        for _, targetCount in ipairs(preferredPlayerCount) do
            local diff = math.abs(server.playing - targetCount)
            if diff < 5 then -- N·∫øu ch√™nh l·ªách √≠t h∆°n 5 ng∆∞·ªùi
                playerScore = 10 - diff -- Server g·∫ßn v·ªõi s·ªë ng∆∞·ªùi mong mu·ªën s·∫Ω c√≥ ƒëi·ªÉm cao
                break
            end
        end
        
        -- C≈©ng ∆∞u ti√™n server c√≥ ping th·∫•p (n·∫øu c√≥)
        local pingScore = 0
        if server.ping then
            pingScore = 100 - math.min(server.ping, 100) -- Ping th·∫•p h∆°n = ƒëi·ªÉm cao h∆°n
        end
        
        local totalScore = playerScore + (pingScore / 10) -- Ping √≠t quan tr·ªçng h∆°n s·ªë ng∆∞·ªùi ch∆°i
        
        if totalScore > bestScore then
            bestScore = totalScore
            bestServer = server
        end
    end
    
    -- N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c server t·ªëi ∆∞u, ch·ªçn m·ªôt server ng·∫´u nhi√™n
    if not bestServer then
        bestServer = servers[math.random(1, #servers)]
    end
    
    return bestServer.id
end

-- Th√™m theo d√µi khi c√≥ ng∆∞·ªùi mua t·ª´ gian h√†ng
Network.Fired("Booths_Bought"):Connect(function(data)
    -- N·∫øu c√≥ ai ƒë√≥ mua t·ª´ gian h√†ng c·ªßa b·∫°n
    if data and data.booth and data.booth.owned and data.uid then
        -- Ki·ªÉm tra xem v·∫≠t ph·∫©m b√°n ra c√≥ trong danh s√°ch ƒë√£ listing kh√¥ng
        local itemInfo = listedItems[data.uid]
        if itemInfo then
            -- G·ªçi h√†m webhook v·ªõi th√¥ng tin ƒë√£ l∆∞u tr·ªØ
            if getgenv().Config["Enable Webhook Notifications"] then
                SendWebhookSold(itemInfo.id, itemInfo.class, itemInfo.price, itemInfo.data, itemInfo.isHuge, true)
            end
            
            -- C·∫≠p nh·∫≠t th·ªëng k√™
            if itemInfo.isHuge then
                hugesSold = hugesSold + 1
                print("üîî C√≥ ng∆∞·ªùi ƒë√£ mua HUGE PET: " .. itemInfo.id .. " t·ª´ gian h√†ng c·ªßa b·∫°n v·ªõi gi√° " .. Formatint(itemInfo.price))
            else
                normalItemsSold = normalItemsSold + 1
                print("üîî C√≥ ng∆∞·ªùi ƒë√£ mua ITEM: " .. itemInfo.id .. " t·ª´ gian h√†ng c·ªßa b·∫°n v·ªõi gi√° " .. Formatint(itemInfo.price))
            end
            
            -- X√≥a kh·ªèi danh s√°ch ƒë√£ li·ªát k√™
            listedItems[data.uid] = nil
            usedSlots = usedSlots - 1
        end
    end
end)

-- ƒê·ªÉ s·ª≠a l·ªói kh√¥ng t·ª± ƒë·ªông th√™m khi slot gi·∫£m, th√™m logic theo d√µi slot v√† t·ª± ƒë·ªông b·ªï sung
task.spawn(function()
    local lastSlotCount = 0
    
    while task.wait(3) do -- Ki·ªÉm tra m·ªói 3 gi√¢y
        local success, err = pcall(function()
            if getCurrentLocation() ~= "TRADING_PLAZA" then
                return
            end
            
            -- N·∫øu kh√¥ng c√≥ booth, ƒë·ª£i
            if not currentBooth then
                return
            end
            
            -- ƒê·∫øm slot hi·ªán t·∫°i
            local currentSlotCount = 0
            for _, child in pairs(currentBooth.Pets.BoothTop.PetScroll:GetChildren()) do
                if child:IsA("Frame") then
                    currentSlotCount = currentSlotCount + 1
                end
            end
            
            -- N·∫øu slot gi·∫£m, c√≥ nghƒ©a l√† c√≥ ng∆∞·ªùi mua
            if lastSlotCount > 0 and currentSlotCount < lastSlotCount then
                local soldCount = lastSlotCount - currentSlotCount
                print("üìä Ph√°t hi·ªán " .. soldCount .. " slot ƒë√£ b√°n! ƒêang b·ªï sung ngay...")
                
                -- Reset listedItems cho slot ƒë√£ b√°n
                listedItems = {}
                usedSlots = currentSlotCount
                
                -- T√¨m Huge ƒë·ªÉ th√™m v√†o
                local petsToAdd = {}
                local count = 0
                
                for PetId, PetData in pairs(Savemod.Get().Inventory.Pet) do
                    if string.find(PetData.id, "Huge") and not listedItems[PetId] and count < soldCount then
                        table.insert(petsToAdd, {UUID = PetId, Item = PetData})
                        count = count + 1
                    end
                end
                
                -- Th√™m c√°c pet m·ªõi v√†o booth
                for _, petInfo in ipairs(petsToAdd) do
                    task.wait(1) -- ƒê·ª£i 1 gi√¢y gi·ªØa c√°c l·∫ßn t·∫°o listing
                    createHugeListing(petInfo.UUID, petInfo.Item)
                end
            end
            
            -- C·∫≠p nh·∫≠t s·ªë slot cho l·∫ßn ki·ªÉm tra ti·∫øp theo
            lastSlotCount = currentSlotCount
        end)
        
        if not success and err then
            warn("L·ªói theo d√µi slot: " .. tostring(err))
        end
    end
end)

-- Server hopping c·∫£i ti·∫øn - CH·ªà HOP TR∆Ø·ªöC KHI B√ÅN
spawn(function()
    while true do
        local currentTime = os.time()
        local timeElapsed = currentTime - lastHopTime
        
        -- Ki·ªÉm tra xem ƒë√£ ƒë·∫øn th·ªùi gian hop server ch∆∞a
        if timeElapsed >= CONSTANTS.HOP_SERVER_TIME then
            print("‚è≥ ƒê√£ ƒë·∫øn th·ªùi gian hop server...")
            
            if getCurrentLocation() == "TRADING_PLAZA" then
                print("üîÑ ƒêang chu·∫©n b·ªã hop server sau 60 ph√∫t...")
                
                -- KH√îNG x√≥a t·∫•t c·∫£ listing hi·ªán t·∫°i tr∆∞·ªõc khi hop
                print("‚ö†Ô∏è Gi·ªØ nguy√™n t·∫•t c·∫£ listing hi·ªán t·∫°i khi hop server")
                
                -- T√¨m server t·ªët nh·∫•t ƒë·ªÉ hop
                local targetServer = findBestServer()
                
                if targetServer then
                    print("‚úÖ ƒê√£ t√¨m th·∫•y server m·ªõi, ƒëang hop...")
                    task.wait(2) -- ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o c√°c thao t√°c tr∆∞·ªõc ƒë√≥ ho√†n t·∫•t
                    
                    -- Th·ª≠ teleport ƒë·∫øn server m·ªõi
                    local success = pcall(function()
                        TeleportService:TeleportToPlaceInstance(game.PlaceId, targetServer)
                    end)
                    
                    if not success then
                        print("‚ùå Hop server th·∫•t b·∫°i, th·ª≠ l·∫°i sau...")
                    end
                else
                    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y server ph√π h·ª£p, s·∫Ω th·ª≠ l·∫°i sau...")
                end
            end
            
            -- C·∫≠p nh·∫≠t th·ªùi gian hop g·∫ßn nh·∫•t
            lastHopTime = currentTime
            task.wait(60) -- ƒê·ª£i √≠t nh·∫•t 1 ph√∫t tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
        else
            -- Hi·ªÉn th·ªã th·ªùi gian c√≤n l·∫°i cho l·∫ßn hop ti·∫øp theo n·∫øu b·∫≠t debug
            if getgenv().Config["Debug Mode"] then
                local remainingTime = CONSTANTS.HOP_SERVER_TIME - timeElapsed
                local minutes = math.floor(remainingTime / 60)
                local seconds = remainingTime % 60
                
                if minutes % 10 == 0 and seconds < 10 then -- Ch·ªâ hi·ªÉn th·ªã m·ªói 10 ph√∫t
                    print(string.format("üïí Th·ªùi gian c√≤n l·∫°i ƒë·∫øn l·∫ßn hop server ti·∫øp theo: %02d:%02d", minutes, seconds))
                end
            end
            
            task.wait(60) -- Ki·ªÉm tra m·ªói ph√∫t
        end
    end
end)

-- Logic teleport v√† chi·∫øm gian h√†ng (ƒë√£ c·∫£i ti·∫øn)
spawn(function()
    while task.wait(5) do
        local currentLocation = getCurrentLocation()
        print("V·ªã tr√≠ hi·ªán t·∫°i: " .. currentLocation)
        
        -- N·∫øu kh√¥ng ·ªü Trading Plaza, teleport ƒë·∫øn ƒë√≥
        if currentLocation ~= "TRADING_PLAZA" then
            print("Kh√¥ng ·ªü Trading Plaza, ƒëang teleport...")
            teleportToTradingPlaza()
        else
            -- ƒê·ª£i nh√¢n v·∫≠t load
            if not (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")) then
                task.wait(1)
                continue
            end
            
            -- Chi·∫øm gian h√†ng
            if not currentBooth then
                print("ƒêang th·ª≠ chi·∫øm gian h√†ng...")
                occupyBooth()
            end
        end
    end
end)

-- G·ª≠i kim c∆∞∆°ng
spawn(function()
    while task.wait(30) do
        local targetUser = getgenv().Config["Account Hold Gem"]
        -- Ch·ªâ g·ª≠i n·∫øu ƒë√£ c·∫•u h√¨nh
        if targetUser and targetUser ~= "" then
            sendGems()
        else
            -- Th√¥ng b√°o m·ªôt l·∫ßn
            print("ƒê√£ b·ªè qua g·ª≠i kim c∆∞∆°ng do ch∆∞a c·∫•u h√¨nh")
            break -- Tho√°t kh·ªèi v√≤ng l·∫∑p n·∫øu kh√¥ng c·∫•u h√¨nh
        end
    end
end)

-- Th√™m th√¥ng tin th·ªëng k√™ ƒë·ªãnh k·ª≥
spawn(function()
    while true do
        task.wait(60) -- M·ªói ph√∫t hi·ªÉn th·ªã th·ªëng k√™ m·ªôt l·∫ßn
        
        print("===== TH·ªêNG K√ä SCRIPT =====")
        print("‚è±Ô∏è Th·ªùi gian ch·∫°y: " .. getElapsedTimeString())
        print("üêæ T·ªïng s·ªë pet Huge trong kho: " .. totalhuge)
        print("üìã S·ªë pet Huge ƒë√£ listing: " .. hugesSold)
        print("üß© S·ªë v·∫≠t ph·∫©m th∆∞·ªùng ƒë√£ listing: " .. normalItemsSold)
        print("üéÆ Slot s·ª≠ d·ª•ng: " .. usedSlots .. "/" .. MAX_BOOTH_SLOTS)
        print("============================")
        
        -- Th√¥ng b√°o ƒë·∫∑c bi·ªát v·ªÅ c·∫•u h√¨nh kh√¥ng x√≥a listing
        print("‚ö†Ô∏è L∆ØU √ù: Script ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë·ªÉ KH√îNG x√≥a listing")
        print("üëâ Khi ƒë·∫ßy slot, script s·∫Ω ƒë·ª£i ƒë·∫øn khi c√≥ slot tr·ªëng")
        print("üëâ Khi hop server, c√°c pet ƒë√£ listing s·∫Ω ƒë∆∞·ª£c gi·ªØ nguy√™n")
    end
end)

-- Main loop - T·∫°o listings
spawn(function()
    while true do
        task.wait(10)
        
        if getCurrentLocation() ~= "TRADING_PLAZA" then
            print("Kh√¥ng ·ªü Trading Plaza, ƒë·ª£i...")
            task.wait(5)
            continue
        end
        
        -- Ki·ªÉm tra xem c√≥ gian h√†ng kh√¥ng
        if not currentBooth then
            print("Kh√¥ng t√¨m th·∫•y gian h√†ng, ƒëang t√¨m...")
            occupyBooth()
            if not currentBooth then
                print("Kh√¥ng t√¨m th·∫•y gian h√†ng, ƒëang th·ª≠ l·∫°i...")
                task.wait(5)
                continue
            end
        end
        
        -- C·∫≠p nh·∫≠t s·ªë slot ƒë√£ s·ª≠ d·ª•ng
        usedSlots = countUsedBoothSlots()
        print("Hi·ªán t·∫°i ƒëang s·ª≠ d·ª•ng: " .. usedSlots .. "/" .. MAX_BOOTH_SLOTS .. " slot gian h√†ng")
        
        -- Ki·ªÉm tra xem ƒë√£ ƒë·∫ßy slot ch∆∞a - S·ª¨A L·ªñI: KH√îNG X√ìA KHI ƒê·∫¶Y SLOT
        if usedSlots >= MAX_BOOTH_SLOTS then
            print("ƒê√£ s·ª≠ d·ª•ng ƒë·ªß " .. MAX_BOOTH_SLOTS .. " slot gian h√†ng, ƒë·ª£i ƒë·∫øn khi c√≥ slot tr·ªëng")
            task.wait(30) -- ƒê·ª£i 30 gi√¢y tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
            continue
        end
        
        -- T·∫°o danh s√°ch v·∫≠t ph·∫©m ƒë·ªÉ list
        local BoothQueue = {}

        -- Th√™m t·∫•t c·∫£ pet Huge v√†o h√†ng ƒë·ª£i, ph√¢n lo·∫°i r√µ r√†ng
        print("ƒêang qu√©t pet Huge...")
        local normalHuges = {}
        local otherHuges = {}

        for PetId, PetData in pairs(Savemod.Get().Inventory.Pet) do
            if string.find(PetData.id, "Huge") and not listedItems[PetId] then
                -- Th·ª≠ t√≠nh RAP, n·∫øu l·ªói v·∫´n th√™m v√†o v·ªõi RAP m·∫∑c ƒë·ªãnh
                local rap = 0
                pcall(function()
                    rap = GetRap("Pet", PetData)
                end)
                
                if rap <= 0 then rap = 10000000 end -- 10M n·∫øu kh√¥ng t√≠nh ƒë∆∞·ª£c
                
                local typeString = getHugeType(PetData.id, PetData)
                local hugeInfo = {
                    UUID = PetId,
                    Item = PetData,
                    Class = "Pet",
                    Rap = rap,
                    Type = "Huge",
                    HugeType = typeString
                }
                
                -- Ph√¢n lo·∫°i Huge th∆∞·ªùng v√† Huge ƒë·∫∑c bi·ªát
                if typeString == "All Huges Normal" then
                    table.insert(normalHuges, hugeInfo)
                    print("ƒê√£ t√¨m th·∫•y Huge th∆∞·ªùng: " .. PetData.id .. " (RAP: " .. rap .. ")")
                else
                    table.insert(otherHuges, hugeInfo)
                    print("ƒê√£ t√¨m th·∫•y Huge ƒë·∫∑c bi·ªát: " .. PetData.id .. " (" .. typeString .. ", RAP: " .. rap .. ")")
                end
            end
        end

        -- S·∫Øp x·∫øp Huge th∆∞·ªùng theo RAP
        if getgenv().Config["Prioritize Low RAP"] then
            table.sort(normalHuges, function(a, b) return a.Rap < b.Rap end)
            print("S·∫Øp x·∫øp Huge th∆∞·ªùng theo RAP tƒÉng d·∫ßn")
        else
            table.sort(normalHuges, function(a, b) return a.Rap > b.Rap end)
            print("S·∫Øp x·∫øp Huge th∆∞·ªùng theo RAP gi·∫£m d·∫ßn")
        end

        -- S·∫Øp x·∫øp Huge ƒë·∫∑c bi·ªát theo RAP
        if getgenv().Config["Prioritize Low RAP"] then
            table.sort(otherHuges, function(a, b) return a.Rap < b.Rap end)
            print("S·∫Øp x·∫øp Huge ƒë·∫∑c bi·ªát theo RAP tƒÉng d·∫ßn")
        else
            table.sort(otherHuges, function(a, b) return a.Rap > b.Rap end)
            print("S·∫Øp x·∫øp Huge ƒë·∫∑c bi·ªát theo RAP gi·∫£m d·∫ßn")
        end

        -- Th√™m t·∫•t c·∫£ Huge th∆∞·ªùng v√†o h√†ng ƒë·ª£i tr∆∞·ªõc
        for _, hugeInfo in ipairs(normalHuges) do
            table.insert(BoothQueue, hugeInfo)
        end

        -- Sau ƒë√≥ th√™m t·∫•t c·∫£ Huge ƒë·∫∑c bi·ªát
        for _, hugeInfo in ipairs(otherHuges) do
            table.insert(BoothQueue, hugeInfo)
        end

        print("ƒê√£ s·∫Øp x·∫øp " .. #normalHuges .. " Huge th∆∞·ªùng v√† " .. #otherHuges .. " Huge ƒë·∫∑c bi·ªát ƒë·ªÉ b√°n")

        -- Th√™m v·∫≠t ph·∫©m th∆∞·ªùng v√†o h√†ng ƒë·ª£i (ch·ªâ khi √≠t pet Huge)
        if #BoothQueue < 5 then
            for Class, Items in pairs(Savemod.Get().Inventory) do
                if Class == "Pet" then continue end -- X·ª≠ l√Ω pet ri√™ng
                
                for ItemId, ItemData in pairs(Items) do
                    local amount = ItemData._am or 1
                    if getgenv().item[ItemData.id] and not listedItems[ItemId] and amount > 0 then
                        local rap = 0
                        pcall(function() 
                            rap = GetRap(Class, ItemData) 
                        end)
                        
                        if rap <= 0 then rap = 100000 end -- 100k n·∫øu kh√¥ng t√≠nh ƒë∆∞·ª£c
                        
                        table.insert(BoothQueue, {
                            UUID = ItemId,
                            Item = ItemData,
                            Class = Class,
                            Rap = rap,
                            Type = "Normal"
                        })
                    end
                end
            end
        end
        
        -- N·∫øu kh√¥ng t√¨m th·∫•y pet Huge, ki·ªÉm tra t·∫•t c·∫£ pet
        if #BoothQueue == 0 then
            print("Kh√¥ng t√¨m th·∫•y pet Huge, ki·ªÉm tra t·∫•t c·∫£ pet kh√°c...")
            for PetId, PetData in pairs(Savemod.Get().Inventory.Pet) do
                if not listedItems[PetId] then
                    -- T√≠nh RAP n·∫øu ƒë∆∞·ª£c, n·∫øu kh√¥ng th√¨ d√πng gi√° m·∫∑c ƒë·ªãnh
                    local rap = 0
                    pcall(function()
                        rap = GetRap("Pet", PetData)
                    end)
                    
                    if rap > 0 then
                        table.insert(BoothQueue, {
                            UUID = PetId,
                            Item = PetData,
                            Class = "Pet",
                            Rap = rap,
                            Type = "Normal Pet"
                        })
                    end
                end
            end
        end
        
        -- T√≠nh to√°n s·ªë l∆∞·ª£ng slot c√≤n tr·ªëng
        local remainingSlots = MAX_BOOTH_SLOTS - usedSlots
        print("C√≥ th·ªÉ th√™m t·ªëi ƒëa " .. remainingSlots .. " v·∫≠t ph·∫©m v√†o gian h√†ng")
        
        -- Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng v·∫≠t ph·∫©m s·∫Ω ƒë∆∞·ª£c th√™m v√†o
        local itemsToAdd = math.min(remainingSlots, #BoothQueue)
        if itemsToAdd == 0 then
            print("Kh√¥ng c√≥ v·∫≠t ph·∫©m m·ªõi ƒë·ªÉ th√™m v√†o gian h√†ng")
            task.wait(60) -- ƒê·ª£i 1 ph√∫t tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
            continue
        end
        
        print("ƒêang th√™m " .. itemsToAdd .. " v·∫≠t ph·∫©m v√†o gian h√†ng...")
        
        -- ƒê·∫∑t th·ªùi gian ch·ªù gi·ªØa c√°c l·∫ßn listing
        local waitTimeBetweenListings = 1
        
        -- T·∫°o listing theo th·ª© t·ª± ∆∞u ti√™n, ch·ªâ cho ƒë·∫øn khi ƒë·∫ßy slot
        for i = 1, itemsToAdd do
            local ItemInfo = BoothQueue[i]
            
            -- D·ª´ng n·∫øu ƒë√£ ƒë·∫ßy slot
            if usedSlots >= MAX_BOOTH_SLOTS then
                print("ƒê√£ s·ª≠ d·ª•ng ƒë·ªß " .. MAX_BOOTH_SLOTS .. " slot gian h√†ng")
                break
            end
            
            if ItemInfo.Type == "Huge" then
                createHugeListing(ItemInfo.UUID, ItemInfo.Item)
            else
                createItemListing(ItemInfo.UUID, ItemInfo.Item.id, ItemInfo.Class, ItemInfo.Item._am or 1, ItemInfo.Rap)
            end
            task.wait(waitTimeBetweenListings) -- ƒê·ª£i gi·ªØa c√°c listing ƒë·ªÉ tr√°nh rate limit
        end
    end
end)

-- In th√¥ng tin v·ªã tr√≠ kh·ªüi ƒë·ªông
print("V·ªã tr√≠ khi kh·ªüi ƒë·ªông: " .. getCurrentLocation())
print("Script ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng v·ªõi icon Trading Plaza: " .. TRADING_PLAZA_ICON)
print("ƒê√£ c·∫•u h√¨nh ∆∞u ti√™n b√°n pet Huge theo RAP t·ª´ th·∫•p ƒë·∫øn cao")
